{"version":3,"file":"Checkbox.story-373ab7fe.js","sources":["../../node_modules/framer-motion/dist/es/utils/transform.mjs","../../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../../node_modules/framer-motion/dist/es/value/use-computed.mjs","../../node_modules/framer-motion/dist/es/value/use-transform.mjs","../../src/form/Checkbox/Checkbox.tsx"],"sourcesContent":["import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { cancelFrame, frame } from '../frameloop/frame.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.update(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { collectMotionValues } from './index.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import React, { FC, forwardRef, Ref, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { motion, useMotionValue, useTransform } from 'framer-motion';\nimport { useTheme } from '../../utils/Theme';\nimport css from './Checkbox.module.css';\n\nexport interface CheckboxProps {\n  /**\n   * Whether the checkbox is checked or not.\n   */\n  checked: boolean;\n\n  /**\n   * Whether the checkbox is in an intermediate state or not.\n   */\n  intermediate?: boolean;\n\n  /**\n   * Label for the checkbox.\n   */\n  label?: string;\n\n  /**\n   * Whether the checkbox is disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Size of the checkbox.\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * Additional class names to apply to the checkbox.\n   */\n  className?: string;\n\n  /**\n   * Additional class names to apply to the container.\n   */\n  containerClassName?: string;\n\n  /**\n   * Additional class names to apply to the label.\n   */\n  labelClassName?: string;\n\n  /**\n   * Event handler for when the checkbox is changed.\n   */\n  onChange?: (value: boolean) => void;\n\n  /**\n   * Event handler for when the checkbox is blurred.\n   */\n  onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;\n}\n\nexport interface CheckboxRef {\n  ref?: Ref<HTMLDivElement>;\n}\n\nexport const Checkbox: FC<CheckboxProps & CheckboxRef> = forwardRef(\n  (\n    {\n      checked,\n      intermediate,\n      label,\n      disabled,\n      size,\n      onChange,\n      onBlur,\n      className,\n      containerClassName,\n      labelClassName,\n      ...rest\n    },\n    ref: Ref<HTMLDivElement>\n  ) => {\n    const theme = useTheme();\n    const pathLength = useMotionValue(0);\n    const opacity = useTransform(pathLength, [0.05, 0.15], [0, 1]);\n\n    const checkVariants = {\n      pressed: (isChecked: boolean) => ({ pathLength: isChecked ? 0.85 : 0.3 }),\n      checked: { pathLength: 1 },\n      unchecked: { pathLength: 0 }\n    };\n\n    const boxVariants = {\n      hover: {\n        strokeWidth: 1,\n        stroke: theme.components.checkbox['checkbox-box-checked-stroke']\n      },\n      pressed: { scale: 0.95 },\n      checked: {\n        stroke: theme.components.checkbox['checkbox-box-checked-stroke']\n      },\n      unchecked: {\n        stroke: theme.components.checkbox['checkbox-box-unchecked-stroke']\n      }\n    };\n\n    return (\n      <div className={classNames(css.container, containerClassName)}>\n        <motion.div\n          {...rest}\n          ref={ref}\n          tabIndex={disabled ? -1 : 0}\n          className={classNames(css.checkbox, className, {\n            [css.disabled]: disabled,\n            [css.small]: size === 'small',\n            [css.medium]: size === 'medium',\n            [css.large]: size === 'large'\n          })}\n          onClick={e => {\n            if (!disabled && onChange) {\n              e.stopPropagation();\n              onChange(!checked);\n            }\n          }}\n          onBlur={onBlur}\n          onKeyDown={event => {\n            if (!disabled && onChange && event.code === 'Space') {\n              onChange(!checked);\n            }\n          }}\n        >\n          <motion.svg\n            animate={checked ? 'checked' : 'unchecked'}\n            whileHover={!disabled ? 'hover' : undefined}\n            whileTap={!disabled ? 'pressed' : undefined}\n            viewBox=\"0 0 16 16\"\n          >\n            <motion.path\n              d=\"M 0 0 L 0 16 L 16 16 L 16 0 Z\"\n              variants={boxVariants}\n            />\n            {intermediate ? (\n              <motion.path\n                d=\"M 5.36396 8.17792 L 10.6044 8.17792\"\n                fill=\"transparent\"\n                strokeWidth=\"1\"\n                className={css.check}\n                variants={checkVariants}\n                style={{ pathLength, opacity }}\n                custom={checked}\n              />\n            ) : (\n              <motion.path\n                d=\"M 5.36396 8.17792 L 7.34236 9.91424 L 10.6044 5.832\"\n                fill=\"transparent\"\n                strokeWidth=\"1\"\n                className={css.check}\n                variants={checkVariants}\n                style={{ pathLength, opacity }}\n                custom={checked}\n              />\n            )}\n          </motion.svg>\n        </motion.div>\n        {label && (\n          <span\n            className={classNames(css.label, labelClassName, {\n              [css.clickable]: !disabled && onChange\n            })}\n            onClick={() => {\n              if (!disabled && onChange) {\n                onChange?.(!checked);\n              }\n            }}\n          >\n            {label}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nCheckbox.defaultProps = {\n  checked: false,\n  intermediate: false,\n  size: 'medium'\n};\n"],"names":["isCustomValueType","v","getMixer","transform","args","useImmediate","argOffset","inputValue","inputRange","outputRange","options","interpolator","interpolate","useCombineMotionValues","values","combineValues","value","useMotionValue","updateValue","useIsomorphicLayoutEffect","scheduleUpdate","frame","subscriptions","unsubscribe","cancelFrame","useComputed","compute","collectMotionValues","useTransform","input","inputRangeOrTransformer","transformer","useListTransform","latest","useConstant","numValues","i","Checkbox","forwardRef","checked","intermediate","label","disabled","size","onChange","onBlur","className","containerClassName","labelClassName","rest","ref","theme","useTheme","pathLength","opacity","checkVariants","isChecked","boxVariants","jsxs","classNames","css","jsx","motion","e","event"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}