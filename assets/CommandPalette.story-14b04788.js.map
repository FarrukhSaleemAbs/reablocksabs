{"version":3,"file":"CommandPalette.story-14b04788.js","sources":["../../src/elements/CommandPalette/CommandPaletteInput/SearchIcon.tsx","../../node_modules/mousetrap/mousetrap.js","../../src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx","../../src/elements/CommandPalette/useFlattenedTree.ts","../../src/elements/CommandPalette/CommandPalette.tsx","../../src/elements/CommandPalette/CommandPaletteItem/CommandPaletteItem.tsx","../../src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nexport const SearchIcon: FC = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    strokeWidth=\"1.5\"\n    stroke=\"currentColor\"\n    ariaHidden=\"true\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\"\n    ></path>\n  </svg>\n);\n","/*global define:false */\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n        return;\n    }\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n\n        // This needs to use a string cause otherwise since 0 is falsey\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\n        // event.\n        //\n        // @see https://github.com/ccampbell/mousetrap/pull/258\n        _MAP[i + 96] = i.toString();\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n        // not the initial event target in the shadow tree. Note that not all events cross the\n        // shadow boundary.\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n        // target cannot be obtained.\n        if ('composedPath' in e && typeof e.composedPath === 'function') {\n            // For open shadow trees, update `element` so that the following check works.\n            var initialEventTarget = e.composedPath()[0];\n            if (initialEventTarget !== e.target) {\n                element = initialEventTarget;\n            }\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * allow custom key mappings\n     */\n    Mousetrap.addKeycodes = function(object) {\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                _MAP[key] = object[key];\n            }\n        }\n        _REVERSE_MAP = null;\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);\n","import React, {\n  FC,\n  KeyboardEvent,\n  FocusEvent,\n  ReactNode,\n  useEffect,\n  useLayoutEffect,\n  useRef\n} from 'react';\nimport { SearchIcon } from './SearchIcon';\nimport { HotkeyIem } from '../useFlattenedTree';\nimport Mousetrap from 'mousetrap';\nimport css from './CommandPaletteInput.module.css';\n\nexport interface CommandPaletteInputProps {\n  /**\n   * The value of the input.\n   */\n  value: string;\n\n  /**\n   * Placeholder text.\n   */\n  placeholder?: string;\n\n  /**\n   * Autofocus or not.\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Icon to show in the search input.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Hotkeys set by CommandPalette from useFlattenedTree.\n   */\n  hotkeys: HotkeyIem[];\n\n  /**\n   * When the search input value changes.\n   */\n  onChange: (value: string) => void;\n\n  /**\n   * When a user presses a key.\n   */\n  onKeyPress: (event: KeyboardEvent<HTMLInputElement>) => void;\n\n  /**\n   * When the input loses focus.\n   */\n  onBlur: (event: FocusEvent<HTMLInputElement>) => void;\n\n  /**\n   * When a hotkey was triggered. Used internally.\n   */\n  onHotkey: (hotkey: HotkeyIem) => void;\n}\n\nexport const CommandPaletteInput: FC<CommandPaletteInputProps> = ({\n  value,\n  autoFocus,\n  icon,\n  hotkeys,\n  placeholder,\n  onHotkey,\n  onBlur,\n  onChange,\n  onKeyPress\n}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  useLayoutEffect(() => {\n    if (autoFocus) {\n      // Small timeout for page loading\n      requestAnimationFrame(() => inputRef.current?.focus());\n    }\n  }, [autoFocus]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      const mousetrap = new Mousetrap(inputRef.current);\n\n      for (const hotkey of hotkeys) {\n        mousetrap.bind(hotkey.hotkey, () => onHotkey(hotkey));\n      }\n    }\n\n    return () => {\n      hotkeys.forEach(hotkey => Mousetrap.unbind(hotkey.hotkey));\n    };\n  }, [onHotkey, hotkeys]);\n\n  return (\n    <div className={css.container}>\n      {icon && <span className={css.icon}>{icon}</span>}\n      <input\n        className={css.input}\n        ref={inputRef}\n        type=\"text\"\n        value={value}\n        placeholder={placeholder}\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        autoComplete=\"off\"\n        onChange={e => onChange(e.target.value)}\n        onKeyDown={onKeyPress}\n        onBlur={onBlur}\n      />\n    </div>\n  );\n};\n\nCommandPaletteInput.defaultProps = {\n  icon: <SearchIcon />\n};\n","import {\n  Children,\n  cloneElement,\n  isValidElement,\n  ReactNode,\n  RefObject,\n  useRef,\n  useState,\n  useEffect\n} from 'react';\n\nexport const DATA_ATTRIBUTE_INDEX = 'keyboard_index';\n\nexport interface FocusableElement {\n  ref: RefObject<HTMLElement>;\n  onClick: (() => void) | undefined;\n}\n\nexport interface HotkeyIem {\n  hotkey: string;\n  index: number;\n}\n\nexport const useFlattenedTree = (\n  children: ReactNode,\n  selectedIndex: number,\n  onSelectedIndexChange: (index: number) => void\n) => {\n  const itemsRef = useRef<HTMLElement[]>([]);\n  const hotkeyRef = useRef<HotkeyIem[]>([]);\n  const [flattenedTree, setFlattenedTree] = useState<ReactNode[]>([]);\n\n  function flattenChildren(nodes: ReactNode) {\n    const result: ReactNode[] = [];\n\n    Children.forEach(nodes, (child: ReactNode, index) => {\n      if (isValidElement(child)) {\n        // @ts-ignore\n        if (child.type.displayName === 'CommandPaletteSection') {\n          result.push(\n            cloneElement(child, {\n              children: flattenChildren(child.props.children),\n              index\n            })\n          );\n          // @ts-ignore\n        } else if (child.type.displayName === 'CommandPaletteItem') {\n          const index = itemsRef.current.length;\n\n          if (child.props.hotkey) {\n            hotkeyRef.current.push({\n              hotkey: child.props.hotkey,\n              index\n            });\n          }\n\n          const clone = cloneElement(child, {\n            // NOTE: This isn't working for some reason\n            ref: (ref: HTMLElement | null) => (itemsRef.current[index] = ref),\n            active: index === selectedIndex,\n            onClick: () => onSelectedIndexChange?.(index),\n            [DATA_ATTRIBUTE_INDEX]: index\n          });\n\n          // NOTE: This is a temp hack\n          itemsRef.current[index] = clone as any;\n\n          result.push(clone);\n        } else {\n          result.push(child);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  useEffect(() => {\n    itemsRef.current = [];\n    hotkeyRef.current = [];\n    setFlattenedTree(flattenChildren(children));\n  }, [children, selectedIndex]);\n\n  return {\n    flattenedTree,\n    hotkeys: hotkeyRef.current,\n    itemsRef\n  };\n};\n","import React, {\n  FC,\n  useState,\n  PropsWithChildren,\n  useEffect,\n  KeyboardEvent,\n  Children,\n  useRef,\n  ReactNode\n} from 'react';\nimport { CommandPaletteInput } from './CommandPaletteInput';\nimport {\n  DATA_ATTRIBUTE_INDEX,\n  HotkeyIem,\n  useFlattenedTree\n} from './useFlattenedTree';\nimport { List, ListItem } from '../../layout/List';\nimport { Card } from '../../layout/Card';\nimport { MotionGroup } from '../../layout/Motion';\nimport css from './CommandPalette.module.css';\n\nexport interface CommandPaletteProps extends PropsWithChildren {\n  /**\n   * Search input value.\n   */\n  search?: string;\n\n  /**\n   * Placeholder text.\n   */\n  placeholder?: string;\n\n  /**\n   * Selected Index.\n   */\n  selected?: number;\n\n  /**\n   * Autofocus or not.\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Empty message to show when there are no items.\n   */\n  emptyMessage?: string;\n\n  /**\n   * Icon to show in the search input.\n   */\n  inputIcon?: ReactNode;\n\n  /**\n   * When the search input value changes.\n   */\n  onSearchChange?: (value: string) => void;\n\n  /**\n   * When a user picks something from the list.\n   */\n  onSelectedIndexChange?: (value: number) => void;\n\n  /**\n   * When a hotkey was triggered.\n   */\n  onHotkey?: (hotkey: HotkeyIem) => void;\n}\n\nexport const CommandPalette: FC<CommandPaletteProps> = ({\n  search,\n  placeholder,\n  children,\n  inputIcon,\n  autoFocus,\n  emptyMessage,\n  onHotkey,\n  onSelectedIndexChange,\n  onSearchChange\n}) => {\n  const [selectedIndex, setSelectedIndex] = useState<number>(-1);\n  const [filterText, setFilterText] = useState<string>(search);\n  const { flattenedTree, itemsRef, hotkeys } = useFlattenedTree(\n    children,\n    selectedIndex,\n    onSelectedIndexChange\n  );\n  const hasChildren = Children.count(children) > 0;\n  const elementRef = useRef<HTMLDivElement | null>(null);\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowUp') {\n      setSelectedIndex(prev => Math.max(prev - 1, -1));\n    } else if (event.key === 'ArrowDown') {\n      setSelectedIndex(prev => Math.min(prev + 1, itemsRef.current.length - 1));\n    } else if (event.key === 'Enter' && itemsRef.current[selectedIndex]) {\n      onSelectedIndexChange?.(selectedIndex);\n      setSelectedIndex(-1);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedIndex > -1) {\n      elementRef.current\n        .querySelector(`[${DATA_ATTRIBUTE_INDEX}=\"${selectedIndex}\"]`)\n        ?.scrollIntoView();\n    }\n  }, [selectedIndex, flattenedTree]);\n\n  return (\n    <Card className={css.card} disablePadding ref={elementRef}>\n      <CommandPaletteInput\n        value={filterText}\n        placeholder={placeholder}\n        autoFocus={autoFocus}\n        icon={inputIcon}\n        hotkeys={hotkeys}\n        onHotkey={onHotkey}\n        onChange={val => {\n          setFilterText(val);\n          onSearchChange?.(val);\n        }}\n        onKeyPress={handleKeyDown}\n        onBlur={() => setSelectedIndex(-1)}\n      />\n      <MotionGroup>\n        {hasChildren && (\n          <Card className={css.innerCard} disablePadding>\n            <List>{flattenedTree}</List>\n          </Card>\n        )}\n        {!hasChildren && emptyMessage && (\n          <List>\n            <ListItem>{emptyMessage}</ListItem>\n          </List>\n        )}\n      </MotionGroup>\n    </Card>\n  );\n};\n\nCommandPalette.defaultProps = {\n  autoFocus: true\n};\n","import React, { forwardRef } from 'react';\nimport { ListItem, ListItemProps } from '../../../layout/List';\nimport classNames from 'classnames';\nimport { MotionItem } from '../../../layout/Motion';\nimport { Kbd } from '../../Kbd';\nimport css from './CommandPaletteItem.module.css';\n\nexport interface CommandPaletteItemProps extends ListItemProps {\n  hotkey?: string;\n}\n\nexport const CommandPaletteItem = forwardRef<\n  HTMLDivElement,\n  CommandPaletteItemProps\n>(({ children, active, className, end, hotkey, onClick, ...rest }, ref) => (\n  <MotionItem layout>\n    <ListItem\n      {...rest}\n      ref={ref}\n      className={classNames(className, css.item, {\n        [css.active]: active,\n        [css.clickable]: onClick\n      })}\n      end={\n        <>\n          {hotkey && <Kbd keycode={hotkey} size=\"small\" />}\n          {end}\n        </>\n      }\n    >\n      {children}\n    </ListItem>\n  </MotionItem>\n));\n\nCommandPaletteItem.displayName = 'CommandPaletteItem';\n","import React, { PropsWithChildren, forwardRef } from 'react';\nimport { List, ListHeader } from '../../../layout/List';\nimport classNames from 'classnames';\nimport { MotionGroup, MotionItem } from '../../../layout/Motion';\nimport css from './CommandPaletteSection.module.css';\n\nexport interface CommandPaletteSectionProps extends PropsWithChildren {\n  /**\n   * Section title.\n   */\n  title?: string;\n\n  /**\n   * Additional class name.\n   */\n  className?: string;\n\n  /**\n   * Section stack index. Set internally.\n   */\n  index?: number;\n}\n\nexport const CommandPaletteSection = forwardRef<\n  HTMLDivElement,\n  CommandPaletteSectionProps\n>(({ children, className, title, index, ...rest }, ref) => (\n  <MotionItem layout>\n    <List\n      ref={ref}\n      {...rest}\n      className={classNames(css.section, className, {\n        [css.first]: index === 0\n      })}\n    >\n      {title && <ListHeader>{title}</ListHeader>}\n      <MotionGroup>{children}</MotionGroup>\n    </List>\n  </MotionItem>\n));\n\nCommandPaletteSection.displayName = 'CommandPaletteSection';\n"],"names":["SearchIcon","jsx","window","document","undefined","_MAP","_KEYCODE_MAP","_SHIFT_MAP","_SPECIAL_ALIASES","_REVERSE_MAP","i","_addEvent","object","type","callback","_characterFromEvent","character","_modifiersMatch","modifiers1","modifiers2","_eventModifiers","modifiers","_preventDefault","_stopPropagation","_isModifier","key","_getReverseMap","_pickBestAction","action","_keysFromString","combination","_getKeyInfo","keys","_belongsTo","element","ancestor","Mousetrap","targetElement","self","_sequenceLevels","_resetTimer","_ignoreNextKeyup","_ignoreNextKeypress","_nextExpectedAction","_resetSequences","doNotReset","activeSequences","_getMatches","e","sequenceName","level","matches","deleteCombo","deleteSequence","_fireCallback","combo","sequence","callbacks","maxLevel","processedSequenceCallback","ignoreThisKeypress","_handleKeyEvent","_resetSequenceTimer","_bindSequence","_increaseSequence","nextAction","_callbackAndReset","isFinal","wrappedCallback","_bindSingle","info","combinations","initialEventTarget","documentMousetrap","method","module","define","CommandPaletteInput","value","autoFocus","icon","hotkeys","placeholder","onHotkey","onBlur","onChange","onKeyPress","inputRef","useRef","useLayoutEffect","_a","useEffect","mousetrap","hotkey","jsxs","css","DATA_ATTRIBUTE_INDEX","useFlattenedTree","children","selectedIndex","onSelectedIndexChange","itemsRef","hotkeyRef","flattenedTree","setFlattenedTree","useState","flattenChildren","nodes","result","Children","child","index","isValidElement","cloneElement","clone","ref","CommandPalette","search","inputIcon","emptyMessage","onSearchChange","setSelectedIndex","filterText","setFilterText","hasChildren","elementRef","handleKeyDown","event","prev","Card","val","MotionGroup","List","ListItem","CommandPaletteItem","forwardRef","active","className","end","onClick","rest","MotionItem","classNames","Fragment","Kbd","CommandPaletteSection","title","ListHeader"],"mappings":"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","x_google_ignoreList":[1]}