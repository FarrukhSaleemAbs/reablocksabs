{"version":3,"file":"ContextMenu-ef93ee68.js","sources":["../../node_modules/create-global-state-hook/index.js","../../src/layers/ContextMenu/ContextMenu.tsx"],"sourcesContent":["const { useState, useCallback, useEffect } = require('react')\n\nmodule.exports = function createGlobalStateHook(initialState) {\n    const rerenders = []\n    const rerenderAll = () => rerenders.forEach(rerender => rerender())\n    let state = initialState instanceof Function ? initialState() : initialState\n\n    return function useGlobalState() {\n        const setRerenderState = useState({})[1]\n        const rerender = useCallback(() => setRerenderState({}), [setRerenderState])\n\n        useEffect(() => {\n            rerenders.push(rerender)\n            return () => {\n                rerenders.splice(rerenders.findIndex(rerender), 1)\n            }\n        }, [rerender])\n\n        const setState = useCallback(\n            newState => {\n                if (newState instanceof Function) state = newState(state)\n                else state = newState\n                rerenderAll()\n            },\n            [rerender]\n        )\n\n        return [state, setState]\n    }\n}\n","import React, { FC, ReactNode, useState, useCallback, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { ConnectedOverlay, ConnectedOverlayProps, useId } from 'rdk';\nimport FocusTrap from 'focus-trap-react';\nimport classNames from 'classnames';\nimport creteGlobalStateHook from 'create-global-state-hook';\nimport css from './ContextMenu.module.css';\n\nconst useGlobalMenuState = creteGlobalStateHook<any[]>([]);\n\nexport interface ContextMenuContentProps {\n  close: () => void;\n  closeAll: () => void;\n}\n\nexport interface ContextMenuProps extends Omit<ConnectedOverlayProps, 'open'> {\n  /**\n   * Child element to trigger the context menu.\n   */\n  children: ReactNode;\n\n  /**\n   * Content to show in the context menu.\n   */\n  content: any | ((args: any) => ReactNode);\n\n  /**\n   * Whether the context menu is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the context menu should autofocus on open.\n   */\n  autofocus?: boolean;\n\n  /**\n   * Whether the context menu should close on click.\n   */\n  autoClose?: boolean;\n\n  /**\n   * Class name to apply to the trigger element.\n   */\n  triggerClassName?: string;\n\n  /**\n   * Class name to apply to the trigger when the context menu is open.\n   */\n  triggerOpenClassName?: string;\n}\n\nexport const ContextMenu: FC<ContextMenuProps> = ({\n  children,\n  content,\n  disabled,\n  triggerClassName,\n  triggerOpenClassName,\n  autofocus,\n  autoClose,\n  ...rest\n}) => {\n  const id = useId();\n  const [menus, setMenus] = useGlobalMenuState();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const onOpen = useCallback(() => {\n    if (!disabled) {\n      menus.forEach(m => m(false));\n      setOpen(true);\n      setMenus([setOpen]);\n    }\n  }, [disabled, setOpen, setMenus, menus]);\n\n  const closeAll = useCallback(() => {\n    setOpen(false);\n    setMenus([]);\n  }, [setOpen, setMenus]);\n\n  const close = useCallback(() => {\n    setOpen(false);\n    setMenus(menus.filter(m => m !== setOpen));\n  }, [menus, setMenus]);\n\n  const onClose = useCallback(() => {\n    closeAll();\n  }, [closeAll]);\n\n  useEffect(() => {\n    if (open) {\n      closeAll();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [closeAll]);\n\n  return (\n    <ConnectedOverlay\n      placement=\"bottom-start\"\n      triggerElement=\"span\"\n      {...rest}\n      triggerClassName={classNames(triggerClassName, {\n        [triggerOpenClassName]: open,\n        [css.enabled]: !disabled\n      })}\n      trigger=\"contextmenu\"\n      open={open}\n      content={() => (\n        <motion.div\n          initial={{ opacity: 0, y: -25 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -25 }}\n          onClick={() => autoClose && onClose?.()}\n        >\n          {autofocus ? (\n            <FocusTrap\n              focusTrapOptions={{\n                escapeDeactivates: true,\n                clickOutsideDeactivates: true,\n                fallbackFocus: `#${id}`\n              }}\n            >\n              <div id={id} tabIndex={-1}>\n                {typeof content === 'function'\n                  ? content({ closeAll, close })\n                  : content}\n              </div>\n            </FocusTrap>\n          ) : (\n            <>\n              {typeof content === 'function'\n                ? content({ closeAll, close })\n                : content}\n            </>\n          )}\n        </motion.div>\n      )}\n      onOpen={onOpen}\n      onClose={onClose}\n    >\n      {children}\n    </ConnectedOverlay>\n  );\n};\n\nContextMenu.defaultProps = {\n  autofocus: true,\n  autoClose: true,\n  closeOnEscape: true,\n  closeOnBodyClick: true\n};\n"],"names":["useState","useCallback","useEffect","require$$0","createGlobalStateHook","initialState","rerenders","rerenderAll","rerender","state","setRerenderState","setState","newState","useGlobalMenuState","creteGlobalStateHook","ContextMenu","children","content","disabled","triggerClassName","triggerOpenClassName","autofocus","autoClose","rest","id","useId","menus","setMenus","open","setOpen","onOpen","m","closeAll","close","onClose","jsx","ConnectedOverlay","classNames","css","motion","FocusTrap","Fragment"],"mappings":"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","x_google_ignoreList":[0]}