{"version":3,"file":"Ellipsis.story-66b458ba.js","sources":["../../src/data/Ellipsis/Ellipsis.tsx"],"sourcesContent":["import React, { FC, useState, useMemo } from 'react';\nimport ellipsize from 'ellipsize';\nimport css from './Ellipsis.module.css';\n\nexport interface EllipsisProps {\n  /**\n   * The value to ellipsis.\n   */\n  value: string;\n\n  /**\n   * Whether you can expand or not. Default: true.\n   */\n  expandable?: boolean;\n\n  /**\n   * Limit of characters to show. Default: 256.\n   */\n  limit?: number;\n\n  /**\n   * The title text to show on the hover.\n   */\n  title?: string | false;\n\n  /**\n   * Remove line breaks or not.\n   */\n  removeLinebreaks?: boolean;\n\n  /**\n   * Class name for the container.\n   */\n  className?: string;\n}\n\nexport const Ellipsis: FC<EllipsisProps> = ({\n  value,\n  className,\n  title,\n  removeLinebreaks,\n  expandable,\n  limit\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n\n  const substr = useMemo(() => {\n    const formatted = removeLinebreaks\n      ? value.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n      : value;\n    return ellipsize(formatted, limit, { ellipse: expandable ? '' : '...' });\n  }, [expandable, limit, value, removeLinebreaks]);\n\n  return (\n    <span className={className}>\n      {expanded ? (\n        value\n      ) : (\n        <span title={title !== false ? title || value : undefined}>\n          {substr}\n        </span>\n      )}\n      {expandable && !expanded && value.length > limit && (\n        <button\n          type=\"button\"\n          title=\"Click to view rest of content\"\n          className={css.dots}\n          onClick={event => {\n            event.stopPropagation();\n            setExpanded(true);\n          }}\n        >\n          ...\n        </button>\n      )}\n    </span>\n  );\n};\n\nEllipsis.defaultProps = {\n  removeLinebreaks: true,\n  expandable: true,\n  limit: 256\n};\n"],"names":["Ellipsis","value","className","title","removeLinebreaks","expandable","limit","expanded","setExpanded","useState","substr","useMemo","formatted","ellipsize","jsxs","jsx","css","event"],"mappings":"iKAoCOA,EAAA,CAAA,CAAqC,MAAAC,EAC1C,UAAAC,EACA,MAAAC,EACA,iBAAAC,EACA,WAAAC,EACA,MAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAC,EAAAC,EAAAA,QAAA,IAAA,CACE,MAAAC,EAAAR,EAAAH,EAAA,QAAA,iBAAA,GAAA,EAAAA,EAGA,OAAAY,EAAAD,EAAAN,EAAA,CAAA,QAAAD,EAAA,GAAA,KAAA,CAAA,CAAuE,EAAA,CAAAA,EAAAC,EAAAL,EAAAG,CAAA,CAAA,EAGzE,OAAAU,OAAA,OAAA,CAAA,UAAAZ,EAAA,SAAA,CAEKK,EAAAN,EAAAc,EAAAA,IAAA,OAAA,CAAA,MAAAZ,IAAA,GAAAA,GAAAF,EAAA,OAAA,SAAAS,CAAA,CAAA,EAKCL,GAAA,CAAAE,GAAAN,EAAA,OAAAK,GAAAS,EAAA,IAGA,SAAC,CAAA,KAAA,SACM,MAAA,gCACC,UAAAC,EAAA,KACS,QAAAC,GAAA,CAEbA,EAAA,gBAAA,EACAT,EAAA,EAAA,CAAgB,EAClB,SAAA,KACD,CAAA,CAED,CAAA,CAAA,CAIR,EAEAR,EAAA,aAAA,CAAwB,iBAAA,GACJ,WAAA,GACN,MAAA,GAEd"}