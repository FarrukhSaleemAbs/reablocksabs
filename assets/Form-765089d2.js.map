{"version":3,"file":"Form-765089d2.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs","../../docs/recipes/FormExamples.tsx","../../docs/recipes/Form.mdx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    _registerProps.current = control.register(name, props.rules);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) ? { disabled } : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    Number.isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if (isBoolean(disabled)) {\n            const value = disabled\n                ? undefined\n                : get(_formValues, name, getFieldValue(field ? field._f : get(fields, name)._f));\n            set(_formValues, name, value);\n            updateTouchAndDirty(name, value, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { Input } from '../../src/form/Input';\nimport { Button } from '../../src/elements/Button';\nimport { Card } from '../../src/layout/Card';\nimport { Block } from '../../src/layout/Block';\nimport { useForm, Controller } from 'react-hook-form';\n\nexport const BasicForm = () => {\n  const { control, handleSubmit, formState: { isSubmitting } } = useForm();\n\n  return (\n    <Card>\n      <form onSubmit={handleSubmit(values => console.log('values', values))}>\n        <Block>\n          <Controller\n            name=\"email\"\n            control={control}\n            render={({ field: { value, onBlur, onChange } }) => (\n              <Input\n                name=\"email\"\n                disabled={isSubmitting}\n                placeholder=\"Enter your email address...\"\n                value={value}\n                type=\"email\"\n                onChange={onChange}\n                onBlur={onBlur}\n              />\n            )}\n          />\n        </Block>\n        <Block>\n          <Controller\n            name=\"password\"\n            control={control}\n            render={({ field: { value, onBlur, onChange } }) => (\n              <Input\n                name=\"password\"\n                disabled={isSubmitting}\n                placeholder=\"Enter your password...\"\n                value={value}\n                type=\"password\"\n                onChange={onChange}\n                onBlur={onBlur}\n              />\n            )}\n          />\n        </Block>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"filled\"\n          color=\"primary\"\n          disabled={isSubmitting}\n        >\n          {isSubmitting ? 'Logging in...' : 'Login'}\n        </Button>\n      </form>\n    </Card>\n  )\n}\n","import { Meta } from '@storybook/addon-docs';\nimport { BasicForm } from './FormExamples';\n\n<Meta title=\"Recipes/Form\" />\n\n# Forms\nIts recommended that you use a form library like `react-hook-form` to handle form state.\nThis will allow you to easily validate and submit your form. Below is an example\nof how to use `react-hook-form` with the Input component.\n\nHere is a basic login form example:\n\n<BasicForm />\n\nIn order to use the `react-hook-form` library, you need to wrap the `Input` in a\n`Controller` component. Here is an example of how we wrapped the `Input` component\nin the `BasicForm` example above:\n\n```tsx\nimport { Input } from '../../src/form/Input';\nimport { useForm, Controller } from 'react-hook-form';\n\nexport const BasicForm = () => {\n  const { control, handleSubmit } = useForm();\n\n  return (\n    <form onSubmit={handleSubmit(values => console.log('values', values))}>\n      <Controller\n        name=\"email\"\n        control={control}\n        render={({ field: { value, onBlur, onChange } }) => (\n          <Input\n            name=\"email\"\n            disabled={isSubmitting}\n            placeholder=\"Enter your email address...\"\n            value={value}\n            type=\"email\"\n            onChange={onChange}\n            onBlur={onBlur}\n          />\n        )}\n      />\n    </Form>\n  );\n};\n```\n\nMor examples of how to use the `react-hook-form` library can be found in the [official documentation](https://react-hook-form.com/).\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","key","compact","isUndefined","val","get","obj","path","defaultValue","result","isBoolean","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","convertToArrayPayload","shouldSubscribeByName","signalName","exact","currentName","useSubscribe","props","_props","subscription","useFormState","methods","disabled","_mounted","_localProxyFormState","_name","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","useWatch","updateValue","isKey","stringToPath","input","set","object","index","tempPath","length","lastIndex","newValue","objValue","useController","shouldUnregister","isArrayField","_registerProps","_shouldUnregisterField","updateMounted","field","elm","message","Controller","appendErrors","validateAllFieldCriteria","errors","type","focusFieldBy","fields","callback","fieldsNames","_f","currentField","getValidationModes","mode","isWatched","isBlurEvent","watchName","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","options","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","baseGet","updatePath","isEmptyArray","unset","paths","childObject","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","flushRootRender","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_subjects","shouldCaptureDirtyFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","_updateValid","shouldUpdateValid","isValid","_executeSchema","executeBuiltInValidation","_updateIsValidating","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","fieldReference","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","isFieldValueUpdated","getCurrentFieldValue","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","getFieldState","clearErrors","inputName","setError","watch","payload","_updateDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","form","reset","useForm","_formControl","_values","BasicForm","isSubmitting","jsx","Card","jsxs","Block","onBlur","Input","Button","_createMdxContent","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","MDXContent","MDXLayout"],"mappings":"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","x_google_ignoreList":[0]}