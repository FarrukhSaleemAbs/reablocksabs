{"version":3,"file":"NestedMenu-a45dfd89.js","sources":["../../src/layers/Menu/Menu.tsx","../../src/layers/Menu/useMenu.tsx","../../src/layers/Menu/NestedMenu.tsx"],"sourcesContent":["import React, { FC, forwardRef, ReactNode, Ref, useMemo } from 'react';\nimport classNames from 'classnames';\nimport FocusTrap from 'focus-trap-react';\nimport { ConnectedOverlay, OverlayEvent, Placement, useId } from 'rdk';\nimport { Modifiers } from 'popper.js';\nimport { motion } from 'framer-motion';\nimport css from './Menu.module.css';\n\nexport interface MenuProps {\n  /**\n   * Whether to append the menu to the body or not.\n   */\n  appendToBody?: boolean;\n\n  /**\n   * Autofocus the menu on open or not.\n   */\n  autofocus?: boolean;\n\n  /**\n   * The menu contents.\n   */\n  children: any | (() => any);\n\n  /**\n   * CSS class applied to menu element.\n   */\n  className?: string;\n\n  /**\n   * Close the menu on click or not.\n   */\n  closeOnBodyClick: boolean;\n\n  /**\n   * Close the menu on escape.\n   */\n  closeOnEscape: boolean;\n\n  /**\n   * Popper placement type.\n   */\n  placement: Placement;\n\n  /**\n   * Reference element for the menu position.\n   */\n  reference?: any;\n\n  /**\n   * CSS Properties for the menu.\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Whether to show the menu or not.\n   */\n  open: boolean;\n\n  /**\n   * Max height of the menu.\n   */\n  maxHeight: string;\n\n  /**\n   * Popper.js Position modifiers.\n   */\n  modifiers?: Modifiers;\n\n  /**\n   * Whether the menu should be the same width as the reference element\n   */\n  autoWidth?: boolean;\n\n  /**\n   * Min width of the menu.\n   */\n  minWidth?: number;\n\n  /**\n   * Max width of the menu.\n   */\n  maxWidth?: number;\n\n  /**\n   * Menu was closed.\n   */\n  onClose: (event: OverlayEvent) => void;\n\n  /**\n   * Mouse enter event.\n   */\n  onMouseEnter: (event) => void;\n\n  /**\n   * Mouse leave event.\n   */\n  onMouseLeave: (event) => void;\n}\n\nexport const Menu: FC<Partial<MenuProps & { ref?: Ref<HTMLDivElement> }>> =\n  forwardRef(\n    (\n      {\n        reference,\n        children,\n        style,\n        className,\n        placement,\n        closeOnEscape,\n        open,\n        appendToBody,\n        closeOnBodyClick,\n        maxHeight,\n        autofocus,\n        modifiers,\n        autoWidth,\n        minWidth,\n        maxWidth,\n        onClose,\n        onMouseEnter,\n        onMouseLeave\n      },\n      ref: Ref<HTMLDivElement>\n    ) => {\n      const id = useId();\n\n      const internalModifiers = useMemo(() => {\n        if (autoWidth) {\n          const sameWidth = {\n            enabled: true,\n            order: 840,\n            fn: data => {\n              const { width, left, right } = data.offsets.reference;\n              const passedOffset = modifiers?.offset?.offset;\n              let passedXOffset = 0;\n              let menuWidth = width;\n\n              if (maxWidth && menuWidth > maxWidth) {\n                menuWidth = maxWidth;\n              } else if (minWidth && menuWidth < minWidth) {\n                menuWidth = minWidth;\n              }\n\n              if (passedOffset) {\n                if (typeof passedOffset === 'number') {\n                  passedXOffset = passedOffset;\n                } else {\n                  const [skidding] = passedOffset.split(',');\n                  passedXOffset = parseInt(skidding.trim(), 10);\n                }\n              }\n\n              data.styles.width = menuWidth;\n              data.offsets.popper.width = menuWidth;\n              data.offsets.popper.left = left + passedXOffset;\n              data.offsets.popper.right = right + passedXOffset;\n\n              return data;\n            }\n          };\n\n          return modifiers ? { ...modifiers, sameWidth } : { sameWidth };\n        }\n\n        return modifiers;\n      }, [modifiers, autoWidth, minWidth, maxWidth]);\n\n      return (\n        <ConnectedOverlay\n          open={open}\n          closeOnBodyClick={closeOnBodyClick}\n          appendToBody={appendToBody}\n          reference={reference}\n          placement={placement}\n          modifiers={internalModifiers}\n          closeOnEscape={closeOnEscape}\n          content={() => (\n            <motion.div\n              ref={ref}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              className={classNames(css.container, className)}\n              style={style}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            >\n              {autofocus ? (\n                <FocusTrap\n                  focusTrapOptions={{\n                    escapeDeactivates: true,\n                    clickOutsideDeactivates: true,\n                    fallbackFocus: `#${id}`\n                  }}\n                >\n                  <div\n                    id={id}\n                    className={css.inner}\n                    tabIndex={-1}\n                    style={{ maxHeight }}\n                  >\n                    {typeof children === 'function' ? children() : children}\n                  </div>\n                </FocusTrap>\n              ) : (\n                <div className={css.inner} style={{ maxHeight }}>\n                  {typeof children === 'function' ? children() : children}\n                </div>\n              )}\n            </motion.div>\n          )}\n          onClose={onClose}\n        />\n      );\n    }\n  );\n\nMenu.defaultProps = {\n  placement: 'bottom-start',\n  closeOnEscape: true,\n  open: false,\n  appendToBody: true,\n  closeOnBodyClick: true,\n  maxHeight: 'max-height: calc(100vh - 48px)',\n  autofocus: true\n};\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Menu, MenuProps } from './Menu';\n\ntype MenuOptions =\n  | {\n      open?: boolean;\n      onClose?: () => void;\n    }\n  | undefined;\n\nexport const useMenu = (prop?: MenuOptions) => {\n  const { open, onClose } = prop || {};\n  const [internalOpen, setInternalOpen] = useState<boolean>(open);\n  const ref = useRef<any | null>(null);\n\n  useEffect(() => {\n    setInternalOpen(open);\n  }, [open]);\n\n  const onCloseInternal = useCallback(() => {\n    setInternalOpen(false);\n    onClose?.();\n  }, [onClose]);\n\n  const onToggleOpen = useCallback(() => {\n    setInternalOpen(!internalOpen);\n  }, [internalOpen]);\n\n  const Component = useCallback(\n    (props: Partial<MenuProps>) => (\n      <Menu\n        {...props}\n        open={internalOpen}\n        reference={ref}\n        onClose={onCloseInternal}\n      />\n    ),\n    [internalOpen, onCloseInternal]\n  );\n\n  return {\n    isOpen: internalOpen,\n    setOpen: setInternalOpen,\n    toggleOpen: onToggleOpen,\n    Menu: Component,\n    ref\n  };\n};\n","import React, { FC, Fragment, useCallback, useRef, useState } from 'react';\nimport { OverlayEvent, Placement } from 'rdk';\nimport { Menu } from './Menu';\nimport classNames from 'classnames';\n\nexport interface NestedMenuProps {\n  /**\n   * Menu contents.\n   */\n  children: any;\n\n  /**\n   * Label element for the menu item.\n   */\n  label: any;\n\n  /**\n   * Popper placement type.\n   */\n  placement?: Placement;\n\n  /**\n   * CSS class applied to label element.\n   */\n  className?: string;\n\n  /**\n   * CSS Properties for the label element.\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * CSS class applied to label element.\n   */\n  menuClassName?: string;\n\n  /**\n   * CSS class applied to label element when active.\n   */\n  activeClassName?: string;\n\n  /**\n   * CSS Properties for the label element.\n   */\n  menuStyle?: React.CSSProperties;\n\n  /**\n   * Delay before showing tooltip.\n   */\n  enterDelay?: number;\n\n  /**\n   * Delay before closing tooltip.\n   */\n  leaveDelay?: number;\n\n  /**\n   * Close the menu on click or not.\n   */\n  closeOnBodyClick?: boolean;\n\n  /**\n   * Close the menu on escape.\n   */\n  closeOnEscape?: boolean;\n\n  /**\n   * Max height of the menu.\n   */\n  maxHeight?: string;\n\n  /**\n   * Autofocus the menu on open or not.\n   */\n  autofocus?: boolean;\n\n  /**\n   * Nested Menu was closed.\n   */\n  onClose?: (event: OverlayEvent) => void;\n}\n\nexport const NestedMenu: FC<NestedMenuProps> = ({\n  label,\n  children,\n  style,\n  placement,\n  menuClassName,\n  menuStyle,\n  enterDelay,\n  autofocus,\n  leaveDelay,\n  className,\n  maxHeight,\n  activeClassName,\n  closeOnBodyClick,\n  closeOnEscape,\n  onClose\n}) => {\n  const [active, setActive] = useState<boolean>(false);\n  const itemRef = useRef<HTMLDivElement | null>(null);\n  const menuRef = useRef<HTMLDivElement | null>(null);\n  const menuEntered = useRef<boolean>(false);\n  const enterTimeoutRef = useRef<any | null>(null);\n  const leaveTimeoutRef = useRef<any | null>(null);\n\n  const onMouseEnterItem = useCallback(() => {\n    clearTimeout(enterTimeoutRef.current);\n    clearTimeout(leaveTimeoutRef.current);\n    enterTimeoutRef.current = setTimeout(() => setActive(true), enterDelay);\n  }, [enterDelay]);\n\n  const onClickItem = useCallback(() => {\n    clearTimeout(enterTimeoutRef.current);\n    clearTimeout(leaveTimeoutRef.current);\n    setActive(!active);\n  }, [active]);\n\n  const onMouseLeaveItem = useCallback(() => {\n    leaveTimeoutRef.current = setTimeout(() => {\n      if (!menuEntered.current) {\n        setActive(false);\n      }\n    }, leaveDelay);\n  }, [leaveDelay]);\n\n  const onMouseEnterMenu = useCallback(event => {\n    clearTimeout(enterTimeoutRef.current);\n    clearTimeout(leaveTimeoutRef.current);\n    menuEntered.current = true;\n  }, []);\n\n  const onMouseLeaveMenu = useCallback(\n    event => {\n      clearTimeout(enterTimeoutRef.current);\n      clearTimeout(leaveTimeoutRef.current);\n      menuEntered.current = false;\n\n      leaveTimeoutRef.current = setTimeout(() => {\n        if (!itemRef.current?.contains(event.target)) {\n          setActive(false);\n        }\n      }, leaveDelay);\n    },\n    [leaveDelay]\n  );\n\n  const onNestedMenuClose = useCallback(\n    event => {\n      setActive(false);\n      onClose?.(event);\n    },\n    [onClose]\n  );\n\n  return (\n    <Fragment>\n      <div\n        className={classNames(className, { [activeClassName]: active })}\n        style={style}\n        ref={itemRef}\n        onClick={onClickItem}\n        onMouseEnter={onMouseEnterItem}\n        onMouseLeave={onMouseLeaveItem}\n      >\n        {label}\n      </div>\n      <Menu\n        className={menuClassName}\n        autofocus={autofocus}\n        style={menuStyle}\n        reference={itemRef}\n        closeOnBodyClick={closeOnBodyClick}\n        closeOnEscape={closeOnEscape}\n        open={active}\n        placement={placement}\n        maxHeight={maxHeight}\n        ref={menuRef}\n        onMouseEnter={onMouseEnterMenu}\n        onMouseLeave={onMouseLeaveMenu}\n        onClose={onNestedMenuClose}\n      >\n        {children}\n      </Menu>\n    </Fragment>\n  );\n};\n\nNestedMenu.defaultProps = {\n  autofocus: true,\n  placement: 'right-start',\n  closeOnEscape: true,\n  closeOnBodyClick: true,\n  enterDelay: 0,\n  leaveDelay: 100\n};\n"],"names":["Menu","forwardRef","reference","children","style","className","placement","closeOnEscape","open","appendToBody","closeOnBodyClick","maxHeight","autofocus","modifiers","autoWidth","minWidth","maxWidth","onClose","onMouseEnter","onMouseLeave","ref","id","useId","internalModifiers","useMemo","sameWidth","data","width","left","right","passedOffset","_a","passedXOffset","menuWidth","skidding","jsx","ConnectedOverlay","motion","classNames","css","FocusTrap","useMenu","prop","internalOpen","setInternalOpen","useState","useRef","useEffect","onCloseInternal","useCallback","onToggleOpen","Component","props","NestedMenu","label","menuClassName","menuStyle","enterDelay","leaveDelay","activeClassName","active","setActive","itemRef","menuRef","menuEntered","enterTimeoutRef","leaveTimeoutRef","onMouseEnterItem","onClickItem","onMouseLeaveItem","onMouseEnterMenu","event","onMouseLeaveMenu","onNestedMenuClose","jsxs","Fragment"],"mappings":"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"}