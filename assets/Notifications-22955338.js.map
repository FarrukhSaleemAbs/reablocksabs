{"version":3,"file":"Notifications-22955338.js","sources":["../../src/layers/Notification/Notification.tsx","../../src/layers/Notification/NotificationsContext.tsx","../../src/layers/Notification/Notifications.tsx"],"sourcesContent":["import React, { FC, ReactNode, useCallback, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { NotificationOptions } from './NotificationsContext';\nimport { motion } from 'framer-motion';\nimport css from './Notification.module.css';\n\nexport interface NotificationProps extends NotificationOptions {\n  id: number;\n  component?: ReactNode;\n  onClose: (id: number) => void;\n}\n\nexport const Notification: FC<NotificationProps> = ({\n  id,\n  title,\n  showClose,\n  body,\n  timeout,\n  className,\n  variant,\n  component,\n  onClose\n}) => {\n  const timeoutRef = useRef<any | null>(null);\n\n  const clearTimer = useCallback(() => clearTimeout(timeoutRef.current), []);\n\n  const startTimer = useCallback(() => {\n    clearTimer();\n    timeoutRef.current = setTimeout(() => onClose?.(id), timeout);\n  }, [id, timeout, onClose, clearTimer]);\n\n  useEffect(() => {\n    startTimer();\n    return () => clearTimer();\n  }, [clearTimer, startTimer]);\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: 50, scale: 0.5 }}\n      animate={{ opacity: 1, y: 0, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.5, transition: { duration: 0.2 } }}\n      onMouseEnter={clearTimer}\n      onMouseLeave={startTimer}\n    >\n      {component}\n      {!component && (\n        <div\n          className={classNames(css.notification, className, {\n            [css.default]: variant === 'default',\n            [css.error]: variant === 'error',\n            [css.success]: variant === 'success',\n            [css.warning]: variant === 'warning'\n          })}\n        >\n          <div className={css.content}>\n            {title && <div className={css.header}>{title}</div>}\n            {body && (\n              <div className={css.body}>\n                {typeof body === 'string' ? (\n                  <span dangerouslySetInnerHTML={{ __html: body } as any} />\n                ) : (\n                  body\n                )}\n              </div>\n            )}\n          </div>\n          <div className={css.close}>\n            {showClose && (\n              <button\n                type=\"button\"\n                className={css.closeButton}\n                onClick={() => onClose?.(id)}\n              >\n                âœ•\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n};\n","import React, { createContext } from 'react';\n\nexport type NotificationVariants = 'default' | 'success' | 'warning' | 'error';\n\nexport interface NotificationOptions {\n  title?: string | React.JSX.Element | React.JSX.Element[];\n  body?: string | React.JSX.Element | React.JSX.Element[];\n  timeout?: number;\n  showClose?: boolean;\n  variant?: NotificationVariants;\n  className?: string;\n}\n\nexport interface NotificationsContextValue {\n  /**\n   * Create a new notification.\n   */\n  notify(title: string, options?: NotificationOptions): void;\n\n  /**\n   * Create a new error notification.\n   */\n  notifyError(title: string, options?: NotificationOptions): void;\n\n  /**\n   * Create a warning notification.\n   */\n  notifyWarning(title: string, options?: NotificationOptions): void;\n\n  /**\n   * Create a success notification.\n   */\n  notifySuccess(title: string, options?: NotificationOptions): void;\n\n  /**\n   * Clear a specific notification.\n   */\n  clearNotification(id: number): void;\n\n  /**\n   * Clear all notifications.\n   */\n  clearAllNotifications(): void;\n}\n\nexport const NotificationsContext = createContext<NotificationsContextValue>({\n  notify: () => undefined,\n  notifyError: () => undefined,\n  notifyWarning: () => undefined,\n  notifySuccess: () => undefined,\n  clearNotification: () => undefined,\n  clearAllNotifications: () => undefined\n});\n","import React, {\n  Fragment,\n  FC,\n  ReactNode,\n  useState,\n  useCallback,\n  useMemo,\n  JSXElementConstructor\n} from 'react';\nimport { Notification } from './Notification';\nimport {\n  NotificationOptions,\n  NotificationsContext,\n  NotificationVariants\n} from './NotificationsContext';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport css from './Notifications.module.css';\nimport classNames from 'classnames';\n\nexport interface NotificationComponentProps {\n  message: string;\n  variant: NotificationVariants;\n  onClose?: () => void;\n}\n\nexport interface NotificationsProps {\n  limit?: number;\n  timeout?: number;\n  showClose?: boolean;\n  preventFlooding?: boolean;\n  children?: ReactNode;\n  className?: string;\n  components?: {\n    [variant in NotificationVariants]?: JSXElementConstructor<NotificationComponentProps>;\n  };\n}\n\n// Hacky way to track unique versions of a notification\nlet nextId = 0;\n\nexport const Notifications: FC<NotificationsProps> = ({\n  children,\n  limit,\n  timeout,\n  showClose,\n  className,\n  preventFlooding,\n  components\n}) => {\n  const [notifications, setNotifications] = useState<any[]>([]);\n\n  const clearNotification = useCallback(\n    (id: number) => setNotifications(notifications.filter(n => n.id !== id)),\n    [notifications]\n  );\n\n  const clearAllNotifications = useCallback(() => setNotifications([]), []);\n\n  const notify = useCallback(\n    (title: string, options: NotificationOptions = {}) => {\n      // If we are flooded with the same message over and over,\n      // dont add more of the same type. Mainly used for error use cases.\n      if (preventFlooding) {\n        const has = notifications.find(n => n.title === title);\n\n        if (has) {\n          return false;\n        }\n      }\n\n      const id = nextId++;\n\n      const obj = {\n        title,\n        id,\n        variant: 'default',\n        timeout,\n        showClose,\n        ...options\n      };\n\n      const sorted = [obj, ...notifications];\n\n      // Clear old notifications if we hit limit\n      if (sorted.length > limit) {\n        sorted.pop();\n      }\n\n      // Update the container instance\n      setNotifications(sorted);\n\n      return id;\n    },\n    [limit, notifications, preventFlooding, showClose, timeout]\n  );\n\n  const notifyError = useCallback(\n    (title: string, options: NotificationOptions = {}) =>\n      notify(title, { ...options, variant: 'error' }),\n    [notify]\n  );\n\n  const notifyWarning = useCallback(\n    (title: string, options: NotificationOptions = {}) =>\n      notify(title, { ...options, variant: 'warning' }),\n    [notify]\n  );\n\n  const notifySuccess = useCallback(\n    (title: string, options: NotificationOptions = {}) =>\n      notify(title, { ...options, variant: 'success' }),\n    [notify]\n  );\n\n  const values = useMemo(\n    () => ({\n      notify,\n      notifyError,\n      notifyWarning,\n      notifySuccess,\n      clearNotification,\n      clearAllNotifications\n    }),\n    [\n      clearNotification,\n      clearAllNotifications,\n      notify,\n      notifyError,\n      notifySuccess,\n      notifyWarning\n    ]\n  );\n\n  return (\n    <Fragment>\n      <NotificationsContext.Provider value={values}>\n        {children}\n      </NotificationsContext.Provider>\n      <div className={css.container}>\n        <div className={css.positions}>\n          <AnimatePresence>\n            {!!notifications.length && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n              >\n                {notifications.map(n => {\n                  if (components?.[n.variant]) {\n                    const CustomNotification = components?.[n.variant];\n                    return (\n                      <Notification\n                        {...n}\n                        component={\n                          <CustomNotification\n                            message={n.title}\n                            variant={n.variant}\n                            onClose={() => clearNotification(n.id)}\n                          />\n                        }\n                        showClose={false}\n                        key={n.id}\n                        onClose={clearNotification}\n                      />\n                    );\n                  }\n\n                  return (\n                    <Notification\n                      {...n}\n                      key={n.id}\n                      className={classNames(className, n.className)}\n                      onClose={clearNotification}\n                    />\n                  );\n                })}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nNotifications.defaultProps = {\n  limit: 10,\n  timeout: 4000,\n  showClose: true,\n  preventFlooding: true\n};\n"],"names":["Notification","id","title","showClose","body","timeout","className","variant","component","onClose","timeoutRef","useRef","clearTimer","useCallback","startTimer","useEffect","jsxs","motion","classNames","css","jsx","NotificationsContext","createContext","nextId","Notifications","children","limit","preventFlooding","components","notifications","setNotifications","useState","clearNotification","n","clearAllNotifications","notify","options","sorted","notifyError","notifyWarning","notifySuccess","values","useMemo","Fragment","AnimatePresence","CustomNotification","createElement"],"mappings":"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"}