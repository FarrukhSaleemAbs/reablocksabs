{"version":3,"file":"Pager.story-996a9063.js","sources":["../../src/data/Pager/assets/arrow-end.svg","../../src/data/Pager/assets/arrow-next.svg","../../src/data/Pager/assets/arrow-previous.svg","../../src/data/Pager/assets/arrow-start.svg","../../src/data/Pager/utils.ts","../../src/data/Pager/Pager.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4924cf0e__\"","export default \"__VITE_ASSET__29f3b2b2__\"","export default \"__VITE_ASSET__7dece2e0__\"","export default \"__VITE_ASSET__b33db641__\"","const PAGE_COUNT = 6;\nexport const FUZZY_RANGE = 3;\n\n/**\n * Get the range of pages to show in the pager.\n */\nexport function getPageRange(page: number, totalPages: number) {\n  let startPage = Math.max(page - FUZZY_RANGE, 0);\n  let endPage = Math.min(page + FUZZY_RANGE, totalPages);\n\n  if (startPage === 0 && endPage !== totalPages) {\n    endPage = startPage + PAGE_COUNT;\n  } else if (endPage === totalPages && startPage !== 0) {\n    startPage = endPage - PAGE_COUNT;\n  }\n\n  return [startPage, endPage];\n}\n\nexport function getItemsRange(\n  page: number,\n  perPage: number,\n  totalItems: number\n) {\n  const startItem = page * perPage + 1;\n  const endOfPage = (page + 1) * perPage;\n  const endItem = Math.min(endOfPage, totalItems);\n\n  return [startItem, endItem];\n}\n","import React, { FC, Fragment, ReactNode, useCallback } from 'react';\nimport classNames from 'classnames';\n\nimport { Button } from '../../elements/Button';\nimport { Stack } from '../../layout';\nimport { Text } from '../../typography';\nimport { Pluralize } from '../Pluralize';\nimport { ReactComponent as EndArrow } from './assets/arrow-end.svg';\nimport { ReactComponent as NextArrow } from './assets/arrow-next.svg';\nimport { ReactComponent as PreviousArrow } from './assets/arrow-previous.svg';\nimport { ReactComponent as StartArrow } from './assets/arrow-start.svg';\nimport { FUZZY_RANGE, getItemsRange, getPageRange } from './utils';\nimport css from './Pager.module.css';\n\nexport interface PagerProps {\n  /**\n   * The class name to add to the pager.\n   */\n  className?: string;\n\n  /**\n   * The class name to add to the page buttons.\n   */\n  pageClassName?: string;\n\n  /**\n   * The class name for the active page button.\n   */\n  activePageClassName?: string;\n\n  /**\n   * The class name to add to the pages container.\n   */\n  pagesContainerClassName?: string;\n\n  /**\n   * The current page number.\n   */\n  page: number;\n\n  /**\n   * The number of items per page.\n   */\n  size: number;\n\n  /**\n   * The total number of items.\n   */\n  total: number;\n\n  /**\n   * The React node or string to use for the previous arrow.\n   */\n  previousArrow?: ReactNode | string;\n\n  /**\n   * The React node or string to use for the next arrow.\n   */\n  nextArrow?: ReactNode | string;\n\n  /**\n   * The React node or string to use for the start arrow.\n   */\n  startArrow?: ReactNode | string;\n\n  /**\n   * The React node or string to use for the end arrow.\n   */\n  endArrow?: ReactNode | string;\n\n  /**\n   * A callback function that is called when the page changes.\n   */\n  onPageChange?: (page: number) => void;\n\n  /**\n   * The type of table data for the pager to display.\n   */\n  displayMode?: 'pages' | 'items' | 'all';\n}\n\nexport const Pager: FC<PagerProps> = ({\n  className,\n  pageClassName,\n  activePageClassName,\n  pagesContainerClassName,\n  page,\n  size,\n  total,\n  startArrow,\n  endArrow,\n  previousArrow,\n  nextArrow,\n  onPageChange,\n  displayMode\n}) => {\n  const pageCount = Math.ceil(total / size);\n  const canPrevious = page !== 0;\n  const canNext = page < pageCount - 1;\n  const [startPage, endPage] = getPageRange(page, pageCount - 1);\n  const [startItem, endItem] = getItemsRange(page, size, total);\n\n  const previousPage = useCallback(() => {\n    if (canPrevious) {\n      onPageChange?.(page - 1);\n    } else {\n      onPageChange?.(0);\n    }\n  }, [canPrevious, page, onPageChange]);\n\n  const nextPage = useCallback(() => {\n    if (canNext) {\n      onPageChange?.(page + 1);\n    } else {\n      onPageChange?.(pageCount - 1);\n    }\n  }, [canNext, page, onPageChange, pageCount]);\n\n  if (pageCount === 1) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(css.pager, className)}>\n      {(displayMode === 'items' || displayMode === 'all') && (\n        <div className={css.pagerDisplayItems}>\n          {pageCount === 1 && total > 0 && (\n            <Text>\n              Showing {total === 1 ? total : `all ${total.toLocaleString()}`}{' '}\n              <Pluralize count={total} singular=\"item\" showCount={false} />\n            </Text>\n          )}\n          {pageCount > 1 && (\n            <Stack dense>\n              <Text>\n                {startItem.toLocaleString()}-{endItem.toLocaleString()} of{' '}\n                <Pluralize count={total} singular=\"item\" />\n              </Text>\n            </Stack>\n          )}\n        </div>\n      )}\n      {startArrow && (\n        <Button\n          variant=\"text\"\n          size=\"small\"\n          disablePadding\n          title=\"First Page\"\n          onClick={() => onPageChange?.(0)}\n          disabled={!canPrevious}\n        >\n          {startArrow}\n        </Button>\n      )}\n      <Button\n        variant=\"text\"\n        size=\"small\"\n        disablePadding\n        title=\"Previous page\"\n        onClick={previousPage}\n        disabled={!canPrevious}\n      >\n        {previousArrow}\n      </Button>\n      {(displayMode === 'pages' || displayMode === 'all') && (\n        <div\n          className={classNames(css.pagesContainer, pagesContainerClassName)}\n        >\n          {startPage >= 2 && <div className={css.overflow}>&nbsp;...</div>}\n          {[...Array(pageCount)].map((_, i) => (\n            <Fragment key={i}>\n              {i >= startPage && i <= endPage && (\n                <Button\n                  variant=\"text\"\n                  size=\"small\"\n                  disabled={page === i}\n                  title={`Page ${i + 1}`}\n                  className={classNames(\n                    css.page,\n                    {\n                      [activePageClassName || css.active]: page === i\n                    },\n                    pageClassName\n                  )}\n                  onClick={() => onPageChange?.(i)}\n                >\n                  {(i + 1).toLocaleString()}\n                </Button>\n              )}\n            </Fragment>\n          ))}\n          {endPage <= pageCount - FUZZY_RANGE && (\n            <div className={css.overflow}>...&nbsp;</div>\n          )}\n        </div>\n      )}\n      <Button\n        variant=\"text\"\n        title=\"Next Page\"\n        size=\"small\"\n        disablePadding\n        onClick={nextPage}\n        disabled={!canNext}\n      >\n        {nextArrow}\n      </Button>\n      {endArrow && (\n        <Button\n          size=\"small\"\n          title=\"Last Page\"\n          disablePadding\n          variant=\"text\"\n          onClick={() => onPageChange?.(pageCount - 1)}\n          disabled={!canNext}\n        >\n          {endArrow}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nPager.defaultProps = {\n  previousArrow: <PreviousArrow />,\n  nextArrow: <NextArrow />,\n  startArrow: <StartArrow />,\n  endArrow: <EndArrow />,\n  displayMode: 'pages'\n};\n"],"names":["SvgArrowEnd","props","React.createElement","SvgArrowNext","SvgArrowPrevious","SvgArrowStart","PAGE_COUNT","FUZZY_RANGE","getPageRange","page","totalPages","startPage","endPage","getItemsRange","perPage","totalItems","startItem","endOfPage","endItem","Pager","className","pageClassName","activePageClassName","pagesContainerClassName","size","total","startArrow","endArrow","previousArrow","nextArrow","onPageChange","displayMode","pageCount","canPrevious","canNext","previousPage","useCallback","nextPage","jsxs","classNames","css","Text","jsx","Pluralize","Stack","Button","_","i","Fragment","PreviousArrow","NextArrow","StartArrow","EndArrow"],"mappings":"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"}