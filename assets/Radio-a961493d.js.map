{"version":3,"file":"Radio-a961493d.js","sources":["../../src/form/Radio/RadioGroupContext.ts","../../src/form/Radio/Radio.tsx"],"sourcesContent":["import { ReactNode, createContext } from 'react';\n\nexport interface RadioGroupContextProps {\n  /**\n   * Event handler for when the radio selection is changed.\n   */\n  onChange: (value: any) => void;\n\n  /**\n   * Default value of the Radio Button which is checked\n   */\n  selectedValue: any;\n}\n\nexport const RadioGroupContext = createContext<RadioGroupContextProps>({\n  onChange: null,\n  selectedValue: null\n});\n","import React, { FC, forwardRef, Ref, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { motion } from 'framer-motion';\nimport css from './Radio.module.css';\nimport { RadioGroupContext } from './RadioGroupContext';\n\nexport interface RadioProps {\n  /**\n   * Whether the radio is checked or not.\n   * Required only if `Radio` is used independently outside a `RadioGroup`.\n   * If `Radio` is used inside a `RadioGroup` then the value is internally set depending upon if the `value` is same as the selected value.\n   */\n  checked?: boolean;\n\n  /**\n   * Label for the radio.\n   */\n  label?: string;\n\n  /**\n   * Whether the radio is disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Additional class names to apply to the radio.\n   */\n  className?: string;\n\n  /**\n   * Size of the radio.\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * Event handler for when the radio is changed.\n   */\n  onChange?: (value: boolean) => void;\n\n  /**\n   * Event handler for when the radio is blurred.\n   */\n  onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;\n\n  /**\n   * Value passed to the form when used inside a `RadioGroup`.\n   * Required when `Radio` is used within a `RadioGroup`\n   */\n  value?: any;\n}\n\nconst VARIANTS = {\n  check: { opacity: 1, scale: 1 },\n  uncheck: { opacity: 0, scale: 0 }\n};\n\nexport interface RadioRef {\n  ref?: Ref<HTMLDivElement>;\n}\n\nexport const Radio: FC<RadioProps & RadioRef> = forwardRef(\n  (\n    {\n      checked: isRadioChecked,\n      label,\n      disabled,\n      onChange,\n      onBlur,\n      className,\n      size,\n      value,\n      ...rest\n    },\n    ref: Ref<HTMLDivElement>\n  ) => {\n    const { onChange: onGroupValueChange, selectedValue } =\n      useContext(RadioGroupContext);\n    const checked = useMemo(() => {\n      if (selectedValue === null) {\n        return isRadioChecked;\n      } else {\n        return selectedValue === value;\n      }\n    }, [isRadioChecked, selectedValue, value]);\n\n    const onValueChange = (checked: boolean) => {\n      onGroupValueChange?.(value);\n      onChange?.(checked);\n    };\n\n    return (\n      <div className={classNames(css.container, className)}>\n        <div\n          {...rest}\n          ref={ref}\n          tabIndex={0}\n          className={classNames(css.radio, {\n            [css.disabled]: disabled,\n            [css.checked]: checked,\n            [css[size]]: true\n          })}\n          onClick={() => {\n            if (!disabled) {\n              onValueChange(!checked);\n            }\n          }}\n          onBlur={onBlur}\n          onKeyDown={event => {\n            if (!disabled && event.code === 'Space') {\n              onValueChange(!checked);\n            }\n          }}\n        >\n          <motion.div\n            className={css.indicator}\n            initial={!disabled ? { opacity: 0, scale: 0.5 } : {}}\n            variants={VARIANTS}\n            animate={checked ? 'check' : 'uncheck'}\n            transition={{ duration: 0.15 }}\n          />\n        </div>\n        {label && (\n          <span\n            className={classNames(css.label, {\n              [css.clickable]: !disabled\n            })}\n            onClick={() => {\n              if (!disabled) {\n                onValueChange(!checked);\n              }\n            }}\n          >\n            {label}\n          </span>\n        )}\n      </div>\n    );\n  }\n);\n\nRadio.defaultProps = {\n  size: 'medium'\n};\n"],"names":["RadioGroupContext","createContext","VARIANTS","Radio","forwardRef","isRadioChecked","label","disabled","onChange","onBlur","className","size","value","rest","ref","onGroupValueChange","selectedValue","useContext","checked","useMemo","onValueChange","checked2","jsxs","classNames","css","jsx","event","motion"],"mappings":"2eAcaA,EAAoBC,EAAAA,cAAsC,CACrE,SAAU,KACV,cAAe,IACjB,CAAC,ECkCDC,EAAA,CAAiB,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA,EACe,QAAA,CAAA,QAAA,EAAA,MAAA,CAAA,CAEhC,EAMOC,EAAAC,EAAA,WAAyC,CAAA,CAE5C,QAAAC,EACW,MAAAC,EACT,SAAAC,EACA,SAAAC,EACA,OAAAC,EACA,UAAAC,EACA,KAAAC,EACA,MAAAC,EACA,GAAAC,CACG,EAAAC,IAAA,CAIL,KAAA,CAAA,SAAAC,EAAA,cAAAC,CAAA,EAAAC,EAAAA,WAAAjB,CAAA,EAEAkB,EAAAC,EAAAA,QAAA,IACEH,IAAA,KACEX,EAEAW,IAAAJ,EACF,CAAAP,EAAAW,EAAAJ,CAAA,CAAA,EAGFQ,EAAAC,GAAA,CACEN,GAAA,MAAAA,EAAAH,GACAJ,GAAA,MAAAA,EAAAa,EAAkB,EAGpB,OAAAC,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAAC,EAAA,UAAAd,CAAA,EAAA,SAAA,CAEIe,EAAA,IAAA,MAAC,CAAA,GAAAZ,EACK,IAAAC,EACJ,SAAA,EACU,UAAAS,EAAAC,EAAA,MAAA,CACuB,CAAAA,EAAA,QAAA,EAAAjB,EACf,CAAAiB,EAAA,OAAA,EAAAN,EACD,CAAAM,EAAAb,CAAA,CAAA,EAAA,EACF,CAAA,EACd,QAAA,IAAA,CAECJ,GACEa,EAAA,CAAAF,CAAA,CACF,EACF,OAAAT,EACA,UAAAiB,GAAA,CAEE,CAAAnB,GAAAmB,EAAA,OAAA,SACEN,EAAA,CAAAF,CAAA,CACF,EACF,SAAAO,EAAA,IAEAE,EAAA,IAAQ,CAAP,UAAAH,EAAA,UACgB,QAAAjB,EAAA,CAAA,EAAA,CAAA,QAAA,EAAA,MAAA,EAAA,EACoC,SAAAL,EACzC,QAAAgB,EAAA,QAAA,UACmB,WAAA,CAAA,SAAA,GAAA,CACA,CAAA,CAC/B,CAAA,EACFZ,GAAAmB,EAAA,IAEE,OAAC,CAAA,UAAAF,EAAAC,EAAA,MAAA,CACkC,CAAAA,EAAA,SAAA,EAAA,CAAAjB,CACb,CAAA,EACnB,QAAA,IAAA,CAECA,GACEa,EAAA,CAAAF,CAAA,CACF,EACF,SAAAZ,CAEC,CAAA,CACH,CAAA,CAAA,CAEJ,CAGN,EAEAH,EAAA,aAAA,CAAqB,KAAA,QAErB"}