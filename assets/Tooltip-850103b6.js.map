{"version":3,"file":"Tooltip-850103b6.js","sources":["../../src/layers/Tooltip/useTooltipState.ts","../../src/layers/Tooltip/Tooltip.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/**\n * Creates a global state singleton.\n */\nconst createStateHook = () => {\n  let tooltips: ((setter: boolean, isPopover?: boolean) => boolean)[] = [];\n\n  function addTooltip(newTip: any) {\n    tooltips = [...tooltips, newTip];\n  }\n\n  function deactivateTooltip(tooltip, isPopover?: boolean) {\n    const idx = tooltips.indexOf(tooltip);\n    if (idx > -1) {\n      const tip = tooltips[idx];\n      const shouldRemove = tip(false, isPopover);\n      if (shouldRemove) {\n        tooltips.splice(idx, 1);\n      }\n    }\n  }\n\n  function deactivateAllTooltips(isPopover?: boolean) {\n    const newTooltips = [];\n\n    tooltips.forEach(ref => {\n      const shouldRemvoe = ref(false, isPopover);\n\n      if (!shouldRemvoe) {\n        newTooltips.push(ref);\n      }\n    });\n\n    tooltips = [...newTooltips];\n  }\n\n  return () => {\n    const [state, setState] = useState<any[]>([]);\n\n    useEffect(() => {\n      setState(tooltips);\n    }, []);\n\n    return {\n      tooltips: state,\n      deactivateAllTooltips,\n      deactivateTooltip,\n      addTooltip\n    };\n  };\n};\n\nexport const useTooltipState = createStateHook();\n","import React, { FC, useState, useRef, useEffect, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport {\n  Placement,\n  ReferenceObject,\n  ConnectedOverlay,\n  TriggerTypes\n} from 'rdk';\nimport { motion } from 'framer-motion';\nimport { useTooltipState } from './useTooltipState';\nimport css from './Tooltip.module.css';\n\nexport interface TooltipProps {\n  /**\n   * Content to wrap.\n   */\n  children?: ReactNode;\n\n  /**\n   * Close on any click.\n   */\n  closeOnClick?: boolean;\n\n  /**\n   * Close when the body is clicked.\n   */\n  closeOnBodyClick?: boolean;\n\n  /**\n   * Close when escape key is triggered.\n   */\n  closeOnEscape?: boolean;\n\n  /**\n   * Content for the tooltip.\n   */\n  content: any;\n\n  /**\n   * Reference of the tooltip to align to.\n   */\n  reference?: ReferenceObject | HTMLElement | any;\n\n  /**\n   * Popperjs placement.\n   */\n  placement: Placement;\n\n  /**\n   * Delay before showing tooltip.\n   */\n  enterDelay: number;\n\n  /**\n   * Delay before closing tooltip.\n   */\n  leaveDelay: number;\n\n  /**\n   * Popperjs modifiers.\n   */\n  modifiers?: any;\n\n  /**\n   * External setter for visibility.\n   */\n  visible: boolean;\n\n  /**\n   * Additional CSS classnames.\n   */\n  className?: string;\n\n  /**\n   * CSS Classname for the tooltip container ( ie. the thing that the tooltip is bound to ).\n   */\n  triggerClassName?: string;\n\n  /**\n   * How the tooltip will be triggered.\n   */\n  trigger: TriggerTypes[] | TriggerTypes;\n\n  /**\n   * Whether the tooltip is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the tooltip should move with the cursor or not.\n   */\n  followCursor?: boolean;\n\n  /**\n   * Add pointer events or not. Usually not for tooltips.\n   */\n  pointerEvents?: string;\n\n  /**\n   * Differentiator for popovers to be handled separate from tooltips\n   */\n  isPopover?: boolean;\n\n  /**\n   * Tooltip was opened.\n   */\n  onOpen?(): void;\n\n  /**\n   * Tooltip was closed.\n   */\n  onClose?(): void;\n}\n\nexport const Tooltip: FC<Partial<TooltipProps>> = ({\n  className,\n  children,\n  content,\n  triggerClassName,\n  disabled,\n  enterDelay,\n  leaveDelay,\n  placement,\n  trigger,\n  visible,\n  followCursor,\n  closeOnClick,\n  closeOnEscape,\n  closeOnBodyClick,\n  pointerEvents,\n  isPopover,\n  onOpen,\n  onClose,\n  ...rest\n}) => {\n  const { addTooltip, deactivateTooltip, deactivateAllTooltips } =\n    useTooltipState();\n\n  const [internalVisible, setInternalVisible] = useState<boolean>(visible);\n  const timeout = useRef<any | null>(null);\n  const mounted = useRef<boolean>(false);\n  const ref = useRef<(setter: boolean, isPop?: boolean) => boolean>(\n    (vis, isPop) => {\n      // Since Popovers use the Tooltip component and they share state, need to differentiate between\n      // Popovers and Tooltips so one does not deactivate the other\n      if (isPop === isPopover) {\n        setInternalVisible(vis);\n      }\n\n      // Return whether the ref's state was updated\n      return isPop === isPopover;\n    }\n  );\n\n  useEffect(() => {\n    // componentDidUpdateLogic style logic\n    if (!mounted.current) {\n      mounted.current = true;\n    } else {\n      setInternalVisible(visible);\n    }\n\n    const curRef = ref.current;\n    const timer = timeout.current;\n    return () => {\n      clearTimeout(timer);\n      deactivateTooltip(curRef, isPopover);\n    };\n  }, [deactivateTooltip, isPopover, visible]);\n\n  return (\n    <ConnectedOverlay\n      {...rest}\n      placement={placement}\n      trigger={trigger}\n      followCursor={followCursor}\n      triggerClassName={triggerClassName}\n      portalClassName={classNames({\n        [css.disablePointer]: pointerEvents === 'none'\n      })}\n      open={internalVisible}\n      closeOnBodyClick={closeOnBodyClick}\n      closeOnEscape={closeOnEscape}\n      content={() => {\n        const contentChildren =\n          typeof content === 'function' ? content() : content;\n\n        if (!contentChildren) {\n          return null;\n        }\n\n        return (\n          <motion.div\n            className={classNames(css.tooltip, className)}\n            initial={{\n              opacity: 0,\n              scale: 0.3,\n              transition: {\n                when: 'beforeChildren'\n              }\n            }}\n            animate={{\n              opacity: 1,\n              scale: 1,\n              transition: {\n                when: 'beforeChildren'\n              }\n            }}\n            exit={{ opacity: 0, scale: 0.3 }}\n            onClick={() => {\n              if (closeOnClick) {\n                deactivateAllTooltips(isPopover);\n              }\n            }}\n          >\n            {contentChildren}\n          </motion.div>\n        );\n      }}\n      onOpen={() => {\n        if (!internalVisible) {\n          clearTimeout(timeout.current);\n          timeout.current = setTimeout(() => {\n            if (!disabled) {\n              deactivateAllTooltips(isPopover);\n              setInternalVisible(true);\n              addTooltip(ref.current);\n              onOpen?.();\n            }\n          }, enterDelay);\n        }\n      }}\n      onClose={e => {\n        if (\n          e?.nativeEvent?.type !== 'click' ||\n          (e?.nativeEvent?.type === 'click' && closeOnClick)\n        ) {\n          clearTimeout(timeout.current);\n          timeout.current = setTimeout(() => {\n            deactivateTooltip(ref.current, isPopover);\n            onClose?.();\n          }, leaveDelay);\n        }\n      }}\n    >\n      {children}\n    </ConnectedOverlay>\n  );\n};\n\nTooltip.defaultProps = {\n  disabled: false,\n  enterDelay: 0,\n  leaveDelay: 200,\n  placement: 'top',\n  trigger: 'hover',\n  visible: false,\n  followCursor: false,\n  closeOnClick: false,\n  closeOnEscape: true,\n  closeOnBodyClick: true,\n  pointerEvents: 'none'\n};\n"],"names":["createStateHook","tooltips","addTooltip","newTip","deactivateTooltip","tooltip","isPopover","idx","tip","deactivateAllTooltips","newTooltips","ref","state","setState","useState","useEffect","useTooltipState","Tooltip","className","children","content","triggerClassName","disabled","enterDelay","leaveDelay","placement","trigger","visible","followCursor","closeOnClick","closeOnEscape","closeOnBodyClick","pointerEvents","onOpen","onClose","rest","internalVisible","setInternalVisible","timeout","useRef","mounted","vis","isPop","curRef","timer","jsx","ConnectedOverlay","classNames","css","contentChildren","motion","_a","_b"],"mappings":"6MAKA,MAAMA,EAAkB,IAAM,CAC5B,IAAIC,EAAkE,CAAA,EAEtE,SAASC,EAAWC,EAAa,CACpBF,EAAA,CAAC,GAAGA,EAAUE,CAAM,CACjC,CAES,SAAAC,EAAkBC,EAASC,EAAqB,CACjD,MAAAC,EAAMN,EAAS,QAAQI,CAAO,EACpC,GAAIE,EAAM,GAAI,CACN,MAAAC,EAAMP,EAASM,CAAG,EACHC,EAAI,GAAOF,CAAS,GAE9BL,EAAA,OAAOM,EAAK,CAAC,CAE1B,CACF,CAEA,SAASE,EAAsBH,EAAqB,CAClD,MAAMI,EAAc,CAAA,EAEpBT,EAAS,QAAeU,GAAA,CACDA,EAAI,GAAOL,CAAS,GAGvCI,EAAY,KAAKC,CAAG,CACtB,CACD,EAEUV,EAAA,CAAC,GAAGS,CAAW,CAC5B,CAEA,MAAO,IAAM,CACX,KAAM,CAACE,EAAOC,CAAQ,EAAIC,EAAA,SAAgB,CAAE,CAAA,EAE5CC,OAAAA,EAAAA,UAAU,IAAM,CACdF,EAASZ,CAAQ,CACnB,EAAG,CAAE,CAAA,EAEE,CACL,SAAUW,EACV,sBAAAH,EACA,kBAAAL,EACA,WAAAF,CAAA,CACF,CAEJ,EAEac,EAAkBhB,EAAgB,mFC6DxCiB,EAAA,CAAA,CAA4C,UAAAC,EACjD,SAAAC,EACA,QAAAC,EACA,iBAAAC,EACA,SAAAC,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,EACA,QAAAC,EACA,QAAAC,EACA,aAAAC,EACA,aAAAC,EACA,cAAAC,EACA,iBAAAC,EACA,cAAAC,EACA,UAAA1B,EACA,OAAA2B,EACA,QAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,WAAAjC,EAAA,kBAAAE,EAAA,sBAAAK,CAAA,EAAAO,EAAA,EAGA,CAAAoB,EAAAC,CAAA,EAAAvB,EAAA,SAAAa,CAAA,EACAW,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,EAAA,EACA5B,EAAA4B,EAAA,OAAY,CAAAE,EAAAC,KAIRA,IAAApC,GACE+B,EAAAI,CAAA,EAIFC,IAAApC,EACF,EAGFS,OAAAA,EAAAA,UAAA,IAAA,CAEEyB,EAAA,QAGEH,EAAAV,CAAA,EAFAa,EAAA,QAAA,GAKF,MAAAG,EAAAhC,EAAA,QACAiC,EAAAN,EAAA,QACA,MAAA,IAAA,CACE,aAAAM,CAAA,EACAxC,EAAAuC,EAAArC,CAAA,CAAmC,CACrC,EAAA,CAAAF,EAAAE,EAAAqB,CAAA,CAAA,EAGFkB,EAAA,IACEC,EAAC,CAAA,GAAAX,EACK,UAAAV,EACJ,QAAAC,EACA,aAAAE,EACA,iBAAAP,EACA,gBAAA0B,EAAA,CAC4B,CAAAC,EAAA,cAAA,EAAAhB,IAAA,MACc,CAAA,EACzC,KAAAI,EACK,iBAAAL,EACN,cAAAD,EACA,QAAA,IAAA,CAEE,MAAAmB,EAAA,OAAA7B,GAAA,WAAAA,EAAA,EAAAA,EAGA,OAAA6B,EAIAJ,EAAA,IACEK,EAAA,IAAQ,CAAP,UAAAH,EAAAC,EAAA,QAAA9B,CAAA,EAC6C,QAAA,CACnC,QAAA,EACE,MAAA,GACF,WAAA,CACK,KAAA,gBACJ,CACR,EACF,QAAA,CACS,QAAA,EACE,MAAA,EACF,WAAA,CACK,KAAA,gBACJ,CACR,EACF,KAAA,CAAA,QAAA,EAAA,MAAA,EAAA,EAC+B,QAAA,IAAA,CAE7BW,GACEpB,EAAAH,CAAA,CACF,EACF,SAAA2C,CAEC,CAAA,EA3BH,IA4BA,EAEJ,OAAA,IAAA,CAEEb,IACE,aAAAE,EAAA,OAAA,EACAA,EAAA,QAAA,WAAA,IAAA,CACEhB,IACEb,EAAAH,CAAA,EACA+B,EAAA,EAAA,EACAnC,EAAAS,EAAA,OAAA,EACAsB,GAAA,MAAAA,IACF,EAAAV,CAAA,EAEJ,EACF,QAAA,GAAA,YAEE4B,EAAA,iBAAA,cAAA,YAAAA,EAAA,QAAA,WAAAC,EAAA,iBAAA,cAAA,YAAAA,EAAA,QAAA,SAAAvB,KAIE,aAAAS,EAAA,OAAA,EACAA,EAAA,QAAA,WAAA,IAAA,CACElC,EAAAO,EAAA,QAAAL,CAAA,EACA4B,GAAA,MAAAA,GAAU,EAAAV,CAAA,EAEd,EACF,SAAAL,CAEC,CAAA,CAGP,EAEAF,EAAA,aAAA,CAAuB,SAAA,GACX,WAAA,EACE,WAAA,IACA,UAAA,MACD,QAAA,QACF,QAAA,GACA,aAAA,GACK,aAAA,GACA,cAAA,GACC,iBAAA,GACG,cAAA,MAEpB"}