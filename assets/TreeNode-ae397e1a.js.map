{"version":3,"file":"TreeNode-ae397e1a.js","sources":["../../src/layout/Tree/TreeContext.ts","../../src/layout/Tree/Tree.tsx","../../src/layout/Tree/TreeNode.tsx"],"sourcesContent":["import { ReactNode, createContext, useContext } from 'react';\n\nexport interface TreeContextProps {\n  /**\n   * A custom icon to be used for collapsed nodes.\n   */\n  collapsedIcon?: any;\n\n  /**\n   * A custom icon to be used for expanded nodes.\n   */\n  expandedIcon?: any;\n}\n\nexport const TreeContext = createContext<TreeContextProps>({\n  collapsedIcon: null,\n  expandedIcon: null\n});\n","import React, { FC, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Arrow } from '../../elements/Arrow';\nimport { TreeContext, TreeContextProps } from './TreeContext';\nimport css from './Tree.module.css';\n\nexport interface TreeProps extends TreeContextProps {\n  /**\n   * CSS Classname to apply to the tree\n   */\n  className?: string;\n\n  /**\n   * Extra style attributes to apply to the tree\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Children to render inside the tree\n   */\n  children?: any;\n}\n\nexport const Tree: FC<TreeProps> = ({\n  children,\n  className,\n  expandedIcon = <Arrow direction=\"down\" className={css.arrow} />,\n  collapsedIcon = <Arrow direction=\"right\" className={css.arrow} />,\n  ...rest\n}) => {\n  const values = useMemo(\n    () => ({\n      expandedIcon,\n      collapsedIcon\n    }),\n    [collapsedIcon, expandedIcon]\n  );\n\n  return (\n    <TreeContext.Provider value={values}>\n      <div className={classNames(css.tree, className)} {...rest}>\n        <ul className={css.container}>{children}</ul>\n      </div>\n    </TreeContext.Provider>\n  );\n};\n","import React, {\n  Children,\n  ReactNode,\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n  useContext\n} from 'react';\nimport classNames from 'classnames';\nimport { Button } from '../../elements/Button';\nimport { Collapse } from '../Collapse';\nimport { TreeContext } from './TreeContext';\nimport css from './TreeNode.module.css';\n\nexport interface TreeNodeProps {\n  /**\n   * Label to display for the node\n   */\n  label: ReactNode | string;\n\n  /**\n   * CSS Classname to apply to the node\n   */\n  className?: string;\n\n  /**\n   * Children to render inside the node\n   */\n  children?: any;\n\n  /**\n   * Whether the node is expanded or not\n   */\n  expanded?: boolean;\n\n  /**\n   * Whether the node is disabled or not\n   */\n  disabled?: boolean;\n\n  /**\n   * Event fired when the node is expanded\n   */\n  onExpand?: () => void;\n\n  /**\n   * Event fired when the node is collapsed\n   */\n  onCollapse?: () => void;\n}\n\nexport const TreeNode: FC<Partial<TreeNodeProps>> = ({\n  children,\n  className,\n  label,\n  disabled,\n  expanded: expandedProp,\n  onExpand,\n  onCollapse\n}) => {\n  const { expandedIcon, collapsedIcon } = useContext(TreeContext);\n  const [expanded, setExpanded] = useState<boolean>(expandedProp as boolean);\n  const hasChildren = children && Children.count(children) > 0;\n\n  useEffect(() => {\n    setExpanded(expandedProp as boolean);\n  }, [expandedProp]);\n\n  const onButtonClick = useCallback(() => {\n    const newState = !expanded;\n    setExpanded(newState);\n\n    if (newState) {\n      onExpand?.();\n    } else {\n      onCollapse?.();\n    }\n  }, [expanded, onCollapse, onExpand]);\n\n  return (\n    <li\n      className={classNames(className, css.node, {\n        [css.leaf]: !hasChildren,\n        [css.disabled]: disabled\n      })}\n    >\n      <div className={css.nodeBlock}>\n        {hasChildren && (\n          <Button\n            size=\"small\"\n            disabled={disabled}\n            variant=\"text\"\n            title={expanded ? 'Collapse' : 'Expand'}\n            className={css.button}\n            onClick={onButtonClick}\n          >\n            {expanded ? expandedIcon : collapsedIcon}\n          </Button>\n        )}\n        <span className={css.label}>{label}</span>\n      </div>\n      {hasChildren && (\n        <Collapse expanded={expanded}>\n          {() => <ul className={css.subtree}>{children}</ul>}\n        </Collapse>\n      )}\n    </li>\n  );\n};\n"],"names":["TreeContext","createContext","Tree","children","className","expandedIcon","jsx","Arrow","css","collapsedIcon","rest","values","useMemo","classNames","TreeNode","label","disabled","expandedProp","onExpand","onCollapse","useContext","expanded","setExpanded","useState","hasChildren","Children","useEffect","onButtonClick","useCallback","newState","jsxs","Button","Collapse"],"mappings":"4RAcO,MAAMA,EAAcC,EAAAA,cAAgC,CACzD,cAAe,KACf,aAAc,IAChB,CAAC,8FCMMC,EAAA,CAAA,CAA6B,SAAAC,EAClC,UAAAC,EACA,aAAAC,EAAAC,EAAAA,IAAAC,EAAA,CAAA,UAAA,OAAA,UAAAC,EAAA,MAAA,EAC6D,cAAAC,EAAAH,EAAAA,IAAAC,EAAA,CAAA,UAAA,QAAA,UAAAC,EAAA,MAAA,EACE,GAAAE,CAEjE,IAAA,CACE,MAAAC,EAAAC,EAAA,QAAe,KAAA,CACN,aAAAP,EACL,cAAAI,CACA,GACF,CAAAA,EAAAJ,CAAA,CAC4B,EAG9B,OAAAC,EAAA,IAAAN,EAAA,SAAA,CAAA,MAAAW,EAAA,SAAAL,EAAAA,IAAA,MAAA,CAAA,UAAAO,EAAAL,EAAA,KAAAJ,CAAA,EAAA,GAAAM,EAAA,SAAAJ,EAAAA,IAAA,KAAA,CAAA,UAAAE,EAAA,UAAA,SAAAL,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAOF,yoCCOOW,EAAA,CAAA,CAA8C,SAAAX,EACnD,UAAAC,EACA,MAAAW,EACA,SAAAC,EACA,SAAAC,EACU,SAAAC,EACV,WAAAC,CAEF,IAAA,CACE,KAAA,CAAA,aAAAd,EAAA,cAAAI,CAAA,EAAAW,EAAA,WAAApB,CAAA,EACA,CAAAqB,EAAAC,CAAA,EAAAC,EAAA,SAAAN,CAAA,EACAO,EAAArB,GAAAsB,EAAAA,SAAA,MAAAtB,CAAA,EAAA,EAEAuB,EAAAA,UAAA,IAAA,CACEJ,EAAAL,CAAA,CAAmC,EAAA,CAAAA,CAAA,CAAA,EAGrC,MAAAU,EAAAC,EAAAA,YAAA,IAAA,CACE,MAAAC,EAAA,CAAAR,EACAC,EAAAO,CAAA,EAEAA,EACEX,GAAA,MAAAA,IAEAC,GAAA,MAAAA,GACF,EAAA,CAAAE,EAAAF,EAAAD,CAAA,CAAA,EAGF,OAAAY,EAAA,KACE,KAAC,CAAA,UAAAjB,EAAAT,EAAAI,EAAA,KAAA,CAC4C,CAAAA,EAAA,IAAA,EAAA,CAAAgB,EAC5B,CAAAhB,EAAA,QAAA,EAAAQ,CACG,CAAA,EACjB,SAAA,CAEDc,EAAA,KAAA,MAAA,CAAA,UAAAtB,EAAA,UAAA,SAAA,CACGgB,GAAAlB,EAAA,IACCyB,EAAC,CAAA,KAAA,QACM,SAAAf,EACL,QAAA,OACQ,MAAAK,EAAA,WAAA,SACuB,UAAAb,EAAA,OAChB,QAAAmB,EACN,SAAAN,EAAAhB,EAAAI,CAEkB,CAAA,EAC7BH,EAAA,IAAA,OAAA,CAAA,UAAAE,EAAA,MAAA,SAAAO,EAAA,CAEiC,EAAA,EACrCS,GAAAlB,EAAAA,IAAA0B,EAAA,CAAA,SAAAX,EAAA,SAAA,IAAAf,EAAAA,IAAA,KAAA,CAAA,UAAAE,EAAA,QAAA,SAAAL,CAAA,CAAA,CAAA,CAAA,CAIE,CAAA,CAAA,CAIR"}