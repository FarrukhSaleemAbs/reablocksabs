{"version":3,"file":"index-ccb4d992.js","sources":["../../node_modules/human-format/index.js"],"sourcesContent":["// UMD: https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n  /* global define: false */\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.humanFormat = factory();\n  }\n})(this, function () {\n  \"use strict\";\n\n  // =================================================================\n\n  function assign(dst, src) {\n    var i, n, prop;\n    for (i = 1, n = arguments.length; i < n; ++i) {\n      src = arguments[i];\n      if (src != null) {\n        for (prop in src) {\n          if (has(src, prop)) {\n            dst[prop] = src[prop];\n          }\n        }\n      }\n    }\n    return dst;\n  }\n\n  function compareLongestFirst(a, b) {\n    return b.length - a.length;\n  }\n\n  function compareSmallestFactorFirst(a, b) {\n    return a.factor - b.factor;\n  }\n\n  // https://www.npmjs.org/package/escape-regexp\n  function escapeRegexp(str) {\n    return str.replace(/([.*+?=^!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n  }\n\n  function forEach(arr, iterator) {\n    var i, n;\n    for (i = 0, n = arr.length; i < n; ++i) {\n      iterator(arr[i], i);\n    }\n  }\n\n  function forOwn(obj, iterator) {\n    var prop;\n    for (prop in obj) {\n      if (has(obj, prop)) {\n        iterator(obj[prop], prop);\n      }\n    }\n  }\n\n  var has = (function (hasOwnProperty) {\n    return function has(obj, prop) {\n      return obj != null && hasOwnProperty.call(obj, prop);\n    };\n  })(Object.prototype.hasOwnProperty);\n\n  function resolve(container, entry) {\n    while (typeof entry === \"string\") {\n      entry = container[entry];\n    }\n    return entry;\n  }\n\n  // =================================================================\n\n  function Scale(prefixes) {\n    this._prefixes = prefixes;\n\n    var escapedPrefixes = [];\n    var list = [];\n    forOwn(prefixes, function (factor, prefix) {\n      escapedPrefixes.push(escapeRegexp(prefix));\n\n      list.push({\n        factor: factor,\n        prefix: prefix,\n      });\n    });\n\n    // Adds lower cased prefixes for case insensitive fallback.\n    var lcPrefixes = (this._lcPrefixes = {});\n    forOwn(prefixes, function (factor, prefix) {\n      var lcPrefix = prefix.toLowerCase();\n      if (!has(prefixes, lcPrefix)) {\n        lcPrefixes[lcPrefix] = prefix;\n      }\n    });\n\n    list.sort(compareSmallestFactorFirst);\n    this._list = list;\n\n    escapedPrefixes.sort(compareLongestFirst);\n    this._regexp = new RegExp(\n      \"^\\\\s*(-)?\\\\s*(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*(\" +\n        escapedPrefixes.join(\"|\") +\n        \")\\\\s*(.*)\\\\s*?$\",\n      \"i\"\n    );\n  }\n\n  Scale.create = function Scale$create(prefixesList, base, initExp) {\n    var prefixes = {};\n    if (initExp === undefined) {\n      initExp = 0;\n    }\n    forEach(prefixesList, function (prefix, i) {\n      prefixes[prefix] = Math.pow(base, i + initExp);\n    });\n\n    return new Scale(prefixes);\n  };\n\n  // Binary search to find the greatest index which has a value <=.\n  Scale.prototype.findPrefix = function Scale$findPrefix(value) {\n    var list = this._list;\n    var low = 0;\n    var high = list.length - 1;\n\n    var mid, current;\n    while (low !== high) {\n      mid = (low + high + 1) >> 1;\n      current = list[mid].factor;\n\n      if (current > value) {\n        high = mid - 1;\n      } else {\n        low = mid;\n      }\n    }\n\n    return list[low];\n  };\n\n  Scale.prototype.parse = function Scale$parse(str, strict) {\n    var matches = str.match(this._regexp);\n\n    if (matches === null) {\n      return;\n    }\n\n    var prefix = matches[3];\n    var factor;\n\n    if (has(this._prefixes, prefix)) {\n      factor = this._prefixes[prefix];\n    } else if (\n      !strict &&\n      ((prefix = prefix.toLowerCase()), has(this._lcPrefixes, prefix))\n    ) {\n      prefix = this._lcPrefixes[prefix];\n      factor = this._prefixes[prefix];\n    } else {\n      return;\n    }\n\n    var value = +matches[2];\n    if (matches[1] !== undefined) {\n      value = -value;\n    }\n\n    return {\n      factor: factor,\n      prefix: prefix,\n      unit: matches[4],\n      value: value,\n    };\n  };\n\n  // =================================================================\n\n  var scales = {\n    // https://en.wikipedia.org/wiki/Binary_prefix\n    binary: Scale.create(\",Ki,Mi,Gi,Ti,Pi,Ei,Zi,Yi\".split(\",\"), 1024),\n\n    // https://en.wikipedia.org/wiki/Metric_prefix\n    //\n    // Not all prefixes are present, only those which are multiple of\n    // 1000, because humans usually prefer to see close numbers using\n    // the same unit to ease the comparison.\n    SI: Scale.create(\"y,z,a,f,p,n,Âµ,m,,k,M,G,T,P,E,Z,Y\".split(\",\"), 1000, -8),\n  };\n\n  var defaults = {\n    // Decimal digits for formatting.\n    maxDecimals: 2,\n\n    // separator to use between value and units\n    separator: \" \",\n\n    // Unit to use for formatting.\n    unit: \"\",\n  };\n  var rawDefaults = {\n    scale: \"SI\",\n\n    // Strict mode prevents parsing of incorrectly cased prefixes.\n    strict: false,\n  };\n\n  function humanFormat(value, opts) {\n    opts = assign({}, defaults, opts);\n\n    var decimals = opts.decimals;\n    if (decimals !== undefined) {\n      // humanFormat$raw should not round when using decimals option\n      delete opts.maxDecimals;\n    }\n\n    var info = humanFormat$raw(value, opts);\n    value =\n      decimals !== undefined\n        ? info.value.toFixed(decimals)\n        : String(info.value);\n    var suffix = info.prefix + opts.unit;\n    return suffix === \"\" ? value : value + opts.separator + suffix;\n  }\n\n  var humanFormat$bytes$opts = { scale: \"binary\", unit: \"B\" };\n  function humanFormat$bytes(value, opts) {\n    return humanFormat(\n      value,\n      opts === undefined\n        ? humanFormat$bytes$opts\n        : assign({}, humanFormat$bytes$opts, opts)\n    );\n  }\n\n  function humanFormat$parse(str, opts) {\n    var info = humanFormat$parse$raw(str, opts);\n\n    return info.value * info.factor;\n  }\n\n  function humanFormat$parse$raw(str, opts) {\n    if (typeof str !== \"string\") {\n      throw new TypeError(\"str must be a string\");\n    }\n\n    // Merge default options.\n    opts = assign({}, rawDefaults, opts);\n\n    // Get current scale.\n    var scale = resolve(scales, opts.scale);\n    if (scale === undefined) {\n      throw new Error(\"missing scale\");\n    }\n\n    // TODO: the unit should be checked: it might be absent but it\n    // should not differ from the one expected.\n    //\n    // TODO: if multiple units are specified, at least must match and\n    // the returned value should be: { value: <value>, unit: matchedUnit }\n\n    var info = scale.parse(str, opts.strict);\n    if (info === undefined) {\n      throw new Error(\"cannot parse str\");\n    }\n\n    return info;\n  }\n\n  function humanFormat$raw(value, opts) {\n    // Zero is a special case, it never has any prefix.\n    if (value === 0) {\n      return {\n        value: 0,\n        prefix: \"\",\n      };\n    } else if (value < 0) {\n      var result = humanFormat$raw(-value, opts);\n      result.value = -result.value;\n      return result;\n    }\n\n    if (typeof value !== \"number\" || Number.isNaN(value)) {\n      throw new TypeError(\"value must be a number\");\n    }\n\n    // Merge default options.\n    opts = assign({}, rawDefaults, opts);\n\n    // Get current scale.\n    var scale = resolve(scales, opts.scale);\n    if (scale === undefined) {\n      throw new Error(\"missing scale\");\n    }\n\n    var power;\n    var maxDecimals = opts.maxDecimals;\n    var autoMaxDecimals = maxDecimals === \"auto\";\n    if (autoMaxDecimals) {\n      power = 10;\n    } else if (maxDecimals !== undefined) {\n      power = Math.pow(10, maxDecimals);\n    }\n\n    var prefix = opts.prefix;\n    var factor;\n    if (prefix !== undefined) {\n      if (!has(scale._prefixes, prefix)) {\n        throw new Error(\"invalid prefix\");\n      }\n\n      factor = scale._prefixes[prefix];\n    } else {\n      var _ref = scale.findPrefix(value);\n      if (power !== undefined) {\n        do {\n          factor = _ref.factor;\n\n          // factor is usually >> power, therefore it's better to\n          // divide factor by power than the other way to limit\n          // numerical error\n          var r = factor / power;\n\n          value = Math.round(value / r) * r;\n        } while ((_ref = scale.findPrefix(value)).factor !== factor);\n      } else {\n        factor = _ref.factor;\n      }\n\n      prefix = _ref.prefix;\n    }\n    value =\n      power === undefined\n        ? value / factor\n        : Math.round((value * power) / factor) / power;\n\n    if (autoMaxDecimals && Math.abs(value) >= 10) {\n      value = Math.round(value);\n    }\n\n    return {\n      prefix: prefix,\n      value: value,\n    };\n  }\n\n  humanFormat.bytes = humanFormat$bytes;\n  humanFormat.parse = humanFormat$parse;\n  humanFormat$parse.raw = humanFormat$parse$raw;\n  humanFormat.raw = humanFormat$raw;\n  humanFormat.Scale = Scale;\n\n  return humanFormat;\n});\n"],"names":["root","factory","module","this","assign","dst","src","i","n","prop","has","compareLongestFirst","a","b","compareSmallestFactorFirst","escapeRegexp","str","forEach","arr","iterator","forOwn","obj","hasOwnProperty","resolve","container","entry","Scale","prefixes","escapedPrefixes","list","factor","prefix","lcPrefixes","lcPrefix","prefixesList","base","initExp","value","low","high","mid","current","strict","matches","scales","defaults","rawDefaults","humanFormat","opts","decimals","info","humanFormat$raw","suffix","humanFormat$bytes$opts","humanFormat$bytes","humanFormat$parse","humanFormat$parse$raw","scale","result","power","maxDecimals","autoMaxDecimals","_ref","r"],"mappings":"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","x_google_ignoreList":[0]}