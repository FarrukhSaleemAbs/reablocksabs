{"version":3,"file":"useDialog-dcefdbdf.js","sources":["../../src/layers/Dialog/DialogHeader.tsx","../../src/layers/Dialog/Dialog.tsx","../../src/layers/Dialog/useDialog.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport css from './Dialog.module.css';\n\nexport interface DialogHeaderProps {\n  children?: any;\n  className?: string;\n  showCloseButton?: boolean;\n  onClose?: () => void;\n}\n\nexport const DialogHeader: FC<Partial<DialogHeaderProps>> = ({\n  children,\n  className,\n  showCloseButton,\n  onClose\n}) => (\n  <header className={classNames(css.header, className)}>\n    <div>\n      {typeof children === 'string' ? (\n        <h1 className={css.headerText}>{children}</h1>\n      ) : (\n        children\n      )}\n    </div>\n    {showCloseButton && (\n      <button type=\"button\" className={css.closeButton} onClick={onClose}>\n        âœ•\n      </button>\n    )}\n  </header>\n);\n","import React, { FC, ReactElement } from 'react';\nimport classNames from 'classnames';\nimport { CloneElement, GlobalOverlay, GlobalOverlayProps, useId } from 'rdk';\nimport FocusTrap from 'focus-trap-react';\nimport { motion } from 'framer-motion';\nimport { DialogHeader, DialogHeaderProps } from './DialogHeader';\nimport css from './Dialog.module.css';\n\nexport interface DialogProps extends Omit<GlobalOverlayProps, 'children'> {\n  /**\n   * The CSS class name for the root element of the component.\n   */\n  className?: string;\n\n  /**\n   * The CSS class name for the inner content element of the component.\n   */\n  innerClassName?: string;\n\n  /**\n   * The CSS class name for the content of the component.\n   */\n  contentClassName?: string;\n\n  /**\n   * The size of the dialog. Can be a string or a number.\n   */\n  size?: string | number;\n\n  /**\n   * Whether to show the close button in the dialog header.\n   */\n  showCloseButton?: boolean;\n\n  /**\n   * The content of the dialog.\n   */\n  children: any | (() => any);\n\n  /**\n   * Whether to disable padding for the dialog content.\n   */\n  disablePadding?: boolean;\n\n  /**\n   * The footer of the dialog.\n   */\n  footer?: any;\n\n  /**\n   * The header of the dialog.\n   */\n  header?: any;\n\n  /**\n   * The React element for the dialog header.\n   */\n  headerElement: ReactElement<DialogHeaderProps, typeof DialogHeader> | null;\n}\n\nexport const Dialog: FC<Partial<DialogProps>> = ({\n  children,\n  open,\n  className,\n  innerClassName,\n  contentClassName,\n  header,\n  headerElement,\n  footer,\n  onClose,\n  size,\n  disablePadding,\n  hasBackdrop,\n  showCloseButton,\n  closeOnBackdropClick,\n  closeOnEscape\n}) => {\n  const id = useId();\n\n  return (\n    <GlobalOverlay\n      open={open}\n      hasBackdrop={hasBackdrop}\n      closeOnEscape={closeOnEscape}\n      closeOnBackdropClick={closeOnBackdropClick}\n      onClose={onClose}\n    >\n      {({ overlayIndex }) => (\n        <FocusTrap\n          focusTrapOptions={{\n            clickOutsideDeactivates: true,\n            escapeDeactivates: true,\n            fallbackFocus: `#${id}-content`\n          }}\n        >\n          <div id={id} tabIndex={-1}>\n            <motion.div\n              initial={{ opacity: 0, y: '-20%' }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: '20%' }}\n              transition={{ duration: 0.5, ease: [0.04, 0.62, 0.23, 0.98] }}\n              style={{ zIndex: overlayIndex }}\n              className={classNames(css.dialog, className, {\n                [css.disableHeader]: !header,\n                [css.disablePadding]: disablePadding\n              })}\n            >\n              <div\n                className={classNames(css.inner, innerClassName)}\n                style={{ width: size }}\n              >\n                {(header || headerElement) && (\n                  <CloneElement<DialogHeaderProps>\n                    element={headerElement}\n                    showCloseButton={showCloseButton}\n                    onClose={onClose}\n                  >\n                    {header}\n                  </CloneElement>\n                )}\n                <section\n                  id={`${id}-content`}\n                  className={classNames(css.content, contentClassName)}\n                >\n                  {typeof children === 'function' ? children() : children}\n                </section>\n                {footer && <footer className={css.footer}>{footer}</footer>}\n              </div>\n            </motion.div>\n          </div>\n        </FocusTrap>\n      )}\n    </GlobalOverlay>\n  );\n};\n\nDialog.defaultProps = {\n  size: '50%',\n  disablePadding: false,\n  hasBackdrop: true,\n  showCloseButton: true,\n  closeOnBackdropClick: true,\n  closeOnEscape: true,\n  headerElement: <DialogHeader />\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Dialog, DialogProps } from './Dialog';\n\ntype DialogOptions =\n  | {\n      open?: boolean;\n      onClose?: () => void;\n    }\n  | undefined;\n\nexport const useDialog = (prop?: DialogOptions) => {\n  const { open, onClose } = prop || {};\n  const [internalOpen, setInternalOpen] = useState<boolean>(open);\n\n  useEffect(() => {\n    setInternalOpen(open);\n  }, [open]);\n\n  const onCloseInternal = useCallback(() => {\n    setInternalOpen(false);\n    onClose?.();\n  }, [onClose]);\n\n  const onToggleOpen = () => {\n    setInternalOpen(!open);\n  };\n\n  const Component = useCallback(\n    (props: Partial<DialogProps>) => (\n      <Dialog {...props} open={internalOpen} onClose={onCloseInternal} />\n    ),\n    [internalOpen, onCloseInternal]\n  );\n\n  return {\n    isOpen: internalOpen,\n    setOpen: setInternalOpen,\n    toggleOpen: onToggleOpen,\n    Dialog: Component\n  };\n};\n"],"names":["DialogHeader","children","className","showCloseButton","onClose","jsxs","classNames","css","jsx","Dialog","open","innerClassName","contentClassName","header","headerElement","footer","size","disablePadding","hasBackdrop","closeOnBackdropClick","closeOnEscape","id","useId","GlobalOverlay","overlayIndex","FocusTrap","motion","CloneElement","useDialog","prop","internalOpen","setInternalOpen","useState","useEffect","onCloseInternal","useCallback","onToggleOpen","Component","props"],"mappings":"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"}